[{"C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\index.js":"1","C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\App.js":"2","C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\reportWebVitals.js":"3","C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\pages\\Testpage\\Testpage.js":"4","C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\pages\\Landing\\Landing.js":"5","C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\pages\\Staff_Dashboard\\Staff_Dashboard.js":"6","C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\pages\\Student_Dashboard\\Student_Dashboard.js":"7","C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\pages\\Staff_Dashboard\\Dashboard_menu_items\\Chatroom\\Chatroom.js":"8","C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\pages\\Staff_Dashboard\\Dashboard_menu_items\\Forum\\Forum.js":"9","C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\pages\\Staff_Dashboard\\Dashboard_menu_items\\Schedule\\Schedule.js":"10","C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\pages\\Student_Dashboard\\Dashboard_menu_items\\Booking\\Booking.js":"11","C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\pages\\Student_Dashboard\\Dashboard_menu_items\\Chatroom\\Chatroom.js":"12","C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\pages\\Student_Dashboard\\Dashboard_menu_items\\Messages\\Messages.js":"13","C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\pages\\Modulevariables.js":"14"},{"size":500,"mtime":499162500000,"results":"15","hashOfConfig":"16"},{"size":929,"mtime":1611588391914,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":7494,"mtime":1611070473675,"results":"19","hashOfConfig":"16"},{"size":36856,"mtime":1615587612032,"results":"20","hashOfConfig":"16"},{"size":10451,"mtime":1613345623266,"results":"21","hashOfConfig":"16"},{"size":10551,"mtime":1612987886890,"results":"22","hashOfConfig":"16"},{"size":379,"mtime":1611664807419,"results":"23","hashOfConfig":"16"},{"size":31072,"mtime":1616256021277,"results":"24","hashOfConfig":"16"},{"size":44872,"mtime":1615586020056,"results":"25","hashOfConfig":"16"},{"size":56503,"mtime":1615585689109,"results":"26","hashOfConfig":"16"},{"size":259,"mtime":1612443467650,"results":"27","hashOfConfig":"16"},{"size":31729,"mtime":1616260298461,"results":"28","hashOfConfig":"16"},{"size":594,"mtime":1616245422172,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"kxsj5s",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"32"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"32"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"32"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"32"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":30,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"32"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\index.js",[],["70","71"],"C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\App.js",[],"C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\reportWebVitals.js",[],"C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\pages\\Testpage\\Testpage.js",["72","73"],"import React, { Component } from 'react';\r\n\r\n\r\n/**chakra ui imports */\r\nimport {\r\n    ChakraProvider, Button as CUIButton,\r\n    ButtonGroup, Stack, SimpleGrid, Box, Grid, GridItem\r\n} from \"@chakra-ui/react\"\r\nimport { MdBuild, MdCall } from \"react-icons/md\"\r\nimport { FaFacebook, FaTwitter } from \"react-icons/fa\"\r\n\r\n/**material ui imports */\r\nimport { Button as MUIButton } from '@material-ui/core';\r\n\r\n/**react bootstrap imports */\r\nimport { Button as RBButton, Container, Row, Col } from 'react-bootstrap';\r\n\r\nimport logo from '../../assets/kstu.png';\r\n\r\nclass Testpage extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ChakraProvider>\r\n                <div>\r\n\r\n                    {/**material ui components */}\r\n                    material ui components<br />\r\n                    <MUIButton variant=\"contained\">Default</MUIButton>\r\n                    <MUIButton variant=\"contained\" color=\"primary\">\r\n                        Primary\r\n                    </MUIButton>\r\n                    <MUIButton variant=\"contained\" color=\"secondary\">\r\n                        Secondary\r\n                    </MUIButton>\r\n                    <MUIButton variant=\"contained\" disabled>\r\n                        Disabled\r\n                    </MUIButton>\r\n                    <MUIButton variant=\"contained\" color=\"primary\" href=\"#contained-buttons\">\r\n                        Link\r\n                    </MUIButton>\r\n\r\n                    <br /><br />\r\n\r\n                    getbootstrap components<br />\r\n                    {/**getbootstrap components */}\r\n                    <button type=\"button\" class=\"btn btn-primary\">Primary</button>\r\n                    <button type=\"button\" class=\"btn btn-secondary\">Secondary</button>\r\n                    <button type=\"button\" class=\"btn btn-success\">Success</button>\r\n                    <button type=\"button\" class=\"btn btn-danger\">Danger</button>\r\n                    <button type=\"button\" class=\"btn btn-warning\">Warning</button>\r\n                    <button type=\"button\" class=\"btn btn-info\">Info</button>\r\n                    <button type=\"button\" class=\"btn btn-light\">Light</button>\r\n                    <button type=\"button\" class=\"btn btn-dark\">Dark</button>\r\n                    <button type=\"button\" class=\"btn btn-link\">Link</button>\r\n\r\n                    <br /><br />\r\n\r\n                    react-bootstrap components<br />\r\n                    {/**react-bootstrap components */}\r\n                    <RBButton variant=\"primary\">Primary</RBButton>{' '}\r\n                    <RBButton variant=\"secondary\">Secondary</RBButton>{' '}\r\n                    <RBButton variant=\"success\">Success</RBButton>{' '}\r\n                    <RBButton variant=\"warning\">Warning</RBButton>{' '}\r\n                    <RBButton variant=\"danger\">Danger</RBButton> <RBButton variant=\"info\">Info</RBButton>{' '}\r\n                    <RBButton variant=\"light\">Light</RBButton> <RBButton variant=\"dark\">Dark</RBButton>{' '}\r\n                    <RBButton variant=\"link\">Link</RBButton>\r\n\r\n\r\n                    {/**responsive grids */}\r\n                    <Container fluid style={{ background: 'red' }}>\r\n                        <Row>\r\n                            <Col\r\n                                xl={6} /**full screen ≥1200px*/\r\n                                lg={6} /**slight reduction ≥992px*/\r\n                                md={6} /**half screen ≥768px*/\r\n                                sm={6} /**reduction in half screen ≥576px*/\r\n                                xs={6}  /**phone screen <576px*/\r\n                                // xl={true}   /**true property is used for auto layout */\r\n                                style={{ background: 'yellow' }}>1 of 2</Col>\r\n                            <Col xl={6} lg={6} md={6} sm={6} xs={6} style={{ background: 'green' }}>2 of 2</Col>\r\n                        </Row>\r\n                    </Container>\r\n\r\n\r\n                    <img\r\n                        src={logo} style={{ width: 120, height: 120 }}\r\n                        alt=\"\"\r\n                    />\r\n\r\n                    <img\r\n                        style={{ width: 120, height: 120 }}\r\n                        src=\"https://images.pexels.com/photos/20787/pexels-photo.jpg?auto=compress&cs=tinysrgb&h=350\"\r\n                        alt=\"new\"\r\n                    />\r\n                    <br />\r\n\r\n\r\n                    chakra ui components<br />\r\n                    {/**chakra ui components */}\r\n                    <ButtonGroup direction=\"row\" spacing={3} align=\"center\">\r\n                        <CUIButton colorScheme=\"teal\" variant=\"solid\">\r\n                            Button\r\n                        </CUIButton>\r\n                        <CUIButton colorScheme=\"teal\" variant=\"outline\">\r\n                            Button\r\n                        </CUIButton>\r\n\r\n                        <CUIButton leftIcon={<MdBuild />} colorScheme=\"pink\" variant=\"solid\">\r\n                            Settings\r\n                        </CUIButton>\r\n                        <CUIButton rightIcon={<MdCall />} colorScheme=\"blue\" variant=\"outline\">\r\n                            Call us\r\n                        </CUIButton>\r\n\r\n                        <CUIButton\r\n                            isLoading={true}\r\n                            loadingText=\"Submitting\"\r\n                            colorScheme=\"teal\"\r\n                            variant=\"outline\">\r\n                            Submit\r\n                        </CUIButton>\r\n\r\n                        <CUIButton colorScheme=\"facebook\" leftIcon={<FaFacebook />}>\r\n                            Facebook\r\n                        </CUIButton>\r\n                        <CUIButton colorScheme=\"twitter\" leftIcon={<FaTwitter />}>\r\n                            Twitter\r\n                        </CUIButton>\r\n\r\n                    </ButtonGroup>\r\n\r\n                    <br /><br />\r\n\r\n                    <Container fluid >\r\n                        <Row>\r\n                            <Col style={{ background: 'yellow', height: '20vh', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n                                <div>material ui grid</div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n\r\n                    <br />\r\n                    chakra ui simple grid component\r\n                    <SimpleGrid columns={{ xs: 2, sm: 2, md: 2, lg: 2, xl: 2 }} spacingX=\"10px\" spacingY=\"10px\">\r\n                        <Box style={{ background: 'red', height: 80 }}></Box>\r\n                        <Box style={{ background: 'yellow', height: 80 }}></Box>\r\n                        <Box style={{ background: 'green', height: 80 }}></Box>\r\n                    </SimpleGrid>\r\n\r\n                    <br />\r\n                    chakra ui grid component\r\n                    <Grid\r\n                        h=\"200px\"\r\n                        templateRows=\"repeat(2, 1fr)\"\r\n                        templateColumns=\"repeat(5, 1fr)\"\r\n                        gap={4}>\r\n                        <GridItem rowSpan={2} colSpan={1} bg=\"tomato\" />\r\n                        <GridItem colSpan={2} bg=\"papayawhip\" />\r\n                        <GridItem colSpan={2} bg=\"papayawhip\" />\r\n                        <GridItem colSpan={4} bg=\"tomato\" />\r\n                    </Grid>\r\n                </div>\r\n            </ChakraProvider>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Testpage;","C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\pages\\Landing\\Landing.js",["74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89"],"import React, { Component } from 'react';\r\nimport '../Landing/Landing.css'\r\n\r\n/**chakra ui imports */\r\nimport {\r\n    ChakraProvider, Button as CUIButton,\r\n    ButtonGroup, Stack, SimpleGrid, Box, Grid, GridItem, Wrap,\r\n    WrapItem, Avatar, Input, InputGroup, InputRightElement,\r\n    useToast,    /**toast 1 */\r\n    Skeleton, SkeletonCircle, SkeletonText, Spinner,\r\n    Modal as CUIModal,\r\n    ModalOverlay, ModalContent, ModalHeader,\r\n    ModalFooter, ModalBody, ModalCloseButton,\r\n} from \"@chakra-ui/react\"\r\n\r\n/**material ui imports */\r\nimport {\r\n    Button as MUIButton, Typography,\r\n    TextField, Backdrop, CircularProgress,\r\n} from '@material-ui/core';\r\nimport {\r\n    VisibilityOutlined, VisibilityOffOutlined,\r\n    PersonOutlineOutlined, Error, Close\r\n} from '@material-ui/icons';\r\n\r\n/**react bootstrap imports */\r\nimport {\r\n    Button as RBButton, Container, Row, Col,\r\n    Card, Modal,\r\n    CardDeck,\r\n} from 'react-bootstrap';\r\n\r\n/**animations */\r\nimport { Zoom, Slide, Flip } from 'react-reveal';\r\n\r\n// image imports\r\nimport landingbackground from '../../assets/background2.jpg';\r\nimport student_login_avatar from '../../assets/student.jpg';\r\nimport staff_login_avatar from '../../assets/staff.jpg';\r\n\r\nimport { Redirect } from 'react-router' /**navigation***  1 */\r\n\r\nimport modulevariables from '../Modulevariables'\r\nimport { AsyncStorage } from 'AsyncStorage'\r\n\r\nconst server = modulevariables.applicationserver\r\n\r\nclass Landing extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n\r\n            /**we navigate to either page when its set to true */\r\n            student_redirect: false,  /**navigation***  2 */\r\n            staff_redirect: false,  /**navigation***  2 */\r\n\r\n            /**switch between the student or staff login form */\r\n            staff_login_tab_selected: true,\r\n            student_login_tab_selected: false,\r\n\r\n            /**staff textfield variables */\r\n            staff_username: '',\r\n            staff_password: '',\r\n            show_staff_password: false,\r\n\r\n            /**student textfield variables */\r\n            student_number: '',\r\n            student_password: '',\r\n            show_student_password: false,\r\n\r\n            display_modal: false,\r\n            modal_title: '',\r\n            modal_content: '',\r\n\r\n            display_backdrop: false,\r\n        }\r\n    }\r\n\r\n    /**keeping track of username and password onchange textfield events */\r\n    handleStaffusernameChange = (event) => {\r\n        this.setState({\r\n            staff_username: event.target.value\r\n        })\r\n    }\r\n\r\n    handleStaffpasswordChange = (event) => {\r\n        this.setState({\r\n            staff_password: event.target.value\r\n        })\r\n    }\r\n\r\n    handleStudentnumberChange = (event) => {\r\n        this.setState({\r\n            student_number: event.target.value\r\n        })\r\n    }\r\n\r\n    handleStudentpasswordChange = (event) => {\r\n        this.setState({\r\n            student_password: event.target.value\r\n        })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n\r\n        /**toast 2 */\r\n        const { toast } = this.props;\r\n\r\n        /**navigation***  3 */\r\n        if (this.state.student_redirect) {\r\n            return <Redirect push to=\"student/dashboard\" />;\r\n        }\r\n\r\n        /**navigation***  3 */\r\n        if (this.state.staff_redirect) {\r\n            return <Redirect push to=\"staff/dashboard\" />;\r\n        }\r\n\r\n\r\n        return (\r\n            <ChakraProvider>\r\n                <Container fluid\r\n                    style={{\r\n                        backgroundImage: `url(${landingbackground})`,\r\n                        backgroundSize: '100% 100%',\r\n                        backgroundAttachment: 'fixed',\r\n                        backgroundRepeat: 'no-repeat'\r\n                    }}>\r\n\r\n                    {/**modal design */}\r\n                    <CUIModal\r\n                        isOpen={this.state.display_modal}\r\n                        onClose={() => { this.close_modal() }}\r\n                        isCentered\r\n                    >\r\n                        <ModalOverlay />\r\n                        <ModalContent>\r\n                            <ModalHeader>{this.state.modal_title}</ModalHeader>\r\n                            <ModalCloseButton />\r\n                            <ModalBody>\r\n                                {this.state.modal_content}\r\n                            </ModalBody>\r\n\r\n                            <ModalFooter>\r\n                                <CUIButton colorScheme=\"blue\" mr={3}\r\n                                    onClick={() => { this.close_modal() }}\r\n                                >\r\n                                    Close\r\n                                    </CUIButton>\r\n                            </ModalFooter>\r\n                        </ModalContent>\r\n                    </CUIModal>\r\n\r\n                    {/* backdrop */}\r\n                    {\r\n                        this.state.display_backdrop ?\r\n                            <div style={{\r\n                                width: '100%', height: '100%', position: 'fixed',\r\n                                zIndex: 100, left: 0, top: 0, background: 'rgb(0,0,0,0.5)',\r\n                                display: 'flex', justifyContent: 'center', alignItems: 'center'\r\n                            }}>\r\n                                <Spinner thickness=\"4px\" speed=\"0.65s\" emptyColor=\"gray.200\" color=\"blue.500\" size=\"xl\" />\r\n                                <Typography style={{ color: 'white', paddingLeft: 20 }}>please wait ...</Typography>\r\n                            </div>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n\r\n\r\n                    <Row>\r\n                        <Col style={{ background: 'transparent', height: '100vh', display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n\r\n                            {/**shadow covering login card */}\r\n                            <div className=\"shadow-lg rounded\" style={{ background: 'transparent' }}>\r\n\r\n                                {/**login card  */}\r\n                                <Card className=\"text-center\" style={{ background: 'reds', borderColor: 'transparent' }}>\r\n\r\n                                    {/**staff and student switch header container */}\r\n                                    <Container fluid style={{ background: 'reds', padding: 0, marginTop: 20, marginBottom: 25 }}>\r\n                                        <Row>\r\n\r\n                                            {/**staff switch header */}\r\n                                            <Col style={{ display: 'flex', background: 'pinks', margin: 0, justifyContent: 'flex-end' }}>\r\n                                                <Typography\r\n                                                    onClick={() => { this.switch_to_staff_login_section() }}\r\n                                                    style={{ color: 'gray', fontSize: 14, cursor: 'pointer' }}\r\n                                                >\r\n                                                    STAFF\r\n                                                    {this.state.staff_login_tab_selected ?\r\n                                                        <Slide right>\r\n                                                            <div style={{ background: 'reds', borderBottom: '2px solid dodgerblue' }}></div>\r\n                                                        </Slide>\r\n                                                        :\r\n                                                        <div></div>\r\n                                                    }\r\n                                                </Typography>\r\n                                            </Col>\r\n\r\n                                            {/**student switch header */}\r\n                                            <Col style={{ display: 'flex', background: 'greens', margin: 0, justifyContent: 'flex-start' }}>\r\n                                                <Typography\r\n                                                    onClick={() => { this.switch_to_student_login_section() }}\r\n                                                    style={{ color: 'gray', fontSize: 14, cursor: 'pointer' }}\r\n                                                >\r\n                                                    STUDENT\r\n                                                    {this.state.student_login_tab_selected ?\r\n                                                        <Slide left>\r\n                                                            <div style={{ background: 'reds', borderBottom: '2px solid dodgerblue' }}></div>\r\n                                                        </Slide>\r\n                                                        :\r\n                                                        <div></div>\r\n                                                    }\r\n                                                </Typography>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    </Container>\r\n\r\n                                    {/**Staff avatar, inputfields, button and footer container */}\r\n                                    {this.state.staff_login_tab_selected ?\r\n                                        <Flip right>\r\n                                            <Container fluid style={{ background: 'reds', paddingLeft: 0, paddingRight: 0 }}>\r\n\r\n                                                {/**staff avatar container */}\r\n                                                <Container style={{ marginBottom: 15 }}>\r\n                                                    <Row>\r\n                                                        <Col></Col>\r\n                                                        <Col>\r\n                                                            <Wrap>\r\n                                                                <WrapItem>\r\n                                                                    <Avatar size=\"2xl\" name=\"staff avatar\" src={staff_login_avatar} />\r\n                                                                </WrapItem>\r\n                                                            </Wrap>\r\n                                                        </Col>\r\n                                                        <Col></Col>\r\n                                                    </Row>\r\n                                                </Container>\r\n\r\n                                                {/**staff input fields and button section */}\r\n                                                <Card.Body>\r\n                                                    <Stack spacing={4}>\r\n\r\n                                                        {/**staff username textbox */}\r\n                                                        <InputGroup size=\"sm\">\r\n                                                            <Input\r\n                                                                variant=\"filled\"\r\n                                                                pr=\"4.5rem\"\r\n                                                                type=\"text\"\r\n                                                                placeholder=\"Username\"\r\n                                                                value={this.state.staff_username}\r\n                                                                onChange={this.handleStaffusernameChange}\r\n                                                            />\r\n                                                            <InputRightElement style={{ background: 'reds' }} width=\"2.5rem\">\r\n                                                                <PersonOutlineOutlined fontSize='small' style={{ color: '#A4B8BD' }} />\r\n                                                            </InputRightElement>\r\n                                                        </InputGroup>\r\n\r\n                                                        {/**staff password texbox */}\r\n                                                        <InputGroup size=\"sm\">\r\n                                                            <Input\r\n                                                                variant=\"filled\"\r\n                                                                pr=\"4.5rem\"\r\n                                                                type={this.state.show_staff_password ? \"text\" : \"password\"}\r\n                                                                placeholder=\"Password\"\r\n                                                                value={this.state.staff_password}\r\n                                                                onChange={this.handleStaffpasswordChange}\r\n                                                            />\r\n                                                            <InputRightElement style={{ background: 'reds' }} width=\"2.5rem\">\r\n                                                                {\r\n                                                                    this.state.show_staff_password ?\r\n                                                                        <VisibilityOffOutlined\r\n                                                                            style={{ color: '#ADC2C7' }}\r\n                                                                            fontSize='small'\r\n                                                                            onClick={() => { this.setState({ show_staff_password: false }) }}\r\n                                                                        />\r\n                                                                        :\r\n                                                                        <VisibilityOutlined\r\n                                                                            style={{ color: '#ADC2C7' }}\r\n                                                                            fontSize='small'\r\n                                                                            onClick={() => { this.setState({ show_staff_password: true }) }}\r\n                                                                        />\r\n                                                                }\r\n                                                            </InputRightElement>\r\n                                                        </InputGroup>\r\n\r\n                                                        <CUIButton\r\n                                                            onClick={() => {\r\n                                                                this.staff_login(toast) /**toast 4 */\r\n                                                            }}\r\n                                                            isLoading={false}\r\n                                                            loadingText=\"Logging in\"\r\n                                                            colorScheme=\"twitter\"\r\n                                                            variant=\"solid\"\r\n                                                            size=\"md\"\r\n                                                            style={{ marginLeft: 20, marginRight: 20 }}\r\n                                                        >\r\n                                                            Log in\r\n                                                 </CUIButton>\r\n                                                    </Stack>\r\n                                                </Card.Body>\r\n\r\n                                                {/**staff footer section */}\r\n                                                <Card.Footer className=\"text-muted\" style={{ background: 'yellows' }} >\r\n                                                    <Card.Text style={{ fontSize: 12 }}>\r\n                                                        Forgot password?\r\n                                                    </Card.Text>\r\n                                                </Card.Footer>\r\n                                            </Container>\r\n                                        </Flip>\r\n                                        :\r\n                                        <div></div>\r\n                                    }\r\n\r\n\r\n\r\n                                    {/**Student avatar, inputfields, button and footer container */}\r\n                                    {this.state.student_login_tab_selected ?\r\n                                        <Flip left>\r\n                                            <Container fluid style={{ background: 'reds', paddingLeft: 0, paddingRight: 0 }}>\r\n\r\n                                                {/**student avatar container */}\r\n                                                <Container style={{ marginBottom: 15 }}>\r\n                                                    <Row>\r\n                                                        <Col></Col>\r\n                                                        <Col>\r\n                                                            <Wrap>\r\n                                                                <WrapItem>\r\n                                                                    <Avatar size=\"2xl\" name=\"student avatar\" src={student_login_avatar} />\r\n                                                                </WrapItem>\r\n                                                            </Wrap>\r\n                                                        </Col>\r\n                                                        <Col></Col>\r\n                                                    </Row>\r\n                                                </Container>\r\n\r\n                                                {/**student input fields and button section */}\r\n                                                <Card.Body>\r\n                                                    <Stack spacing={4}>\r\n\r\n                                                        {/**student number textbox */}\r\n                                                        <InputGroup size=\"sm\">\r\n                                                            <Input\r\n                                                                variant=\"filled\"\r\n                                                                pr=\"4.5rem\"\r\n                                                                type=\"text\"\r\n                                                                placeholder=\"Student number\"\r\n                                                                value={this.state.student_number}\r\n                                                                onChange={this.handleStudentnumberChange}\r\n                                                            />\r\n                                                            <InputRightElement style={{ background: 'reds' }} width=\"2.5rem\">\r\n                                                                <PersonOutlineOutlined fontSize='small' style={{ color: '#A4B8BD' }} />\r\n                                                            </InputRightElement>\r\n                                                        </InputGroup>\r\n\r\n                                                        {/**student password textbox */}\r\n                                                        <InputGroup size=\"sm\">\r\n                                                            <Input\r\n                                                                variant=\"filled\"\r\n                                                                pr=\"4.5rem\"\r\n                                                                type={this.state.show_student_password ? \"text\" : \"password\"}\r\n                                                                placeholder=\"Password\"\r\n                                                                value={this.state.student_password}\r\n                                                                onChange={this.handleStudentpasswordChange}\r\n                                                            />\r\n                                                            <InputRightElement style={{ background: 'reds' }} width=\"2.5rem\">\r\n                                                                {\r\n                                                                    this.state.show_student_password ?\r\n                                                                        <VisibilityOffOutlined\r\n                                                                            style={{ color: '#ADC2C7' }}\r\n                                                                            fontSize='small'\r\n                                                                            onClick={() => { this.setState({ show_student_password: false }) }}\r\n                                                                        />\r\n                                                                        :\r\n                                                                        <VisibilityOutlined\r\n                                                                            style={{ color: '#ADC2C7' }}\r\n                                                                            fontSize='small'\r\n                                                                            onClick={() => { this.setState({ show_student_password: true }) }}\r\n                                                                        />\r\n                                                                }\r\n                                                            </InputRightElement>\r\n                                                        </InputGroup>\r\n\r\n                                                        <CUIButton\r\n                                                            onClick={() => { this.student_login(toast) }}\r\n                                                            isLoading={false}\r\n                                                            loadingText=\"Logging in\"\r\n                                                            colorScheme=\"twitter\"\r\n                                                            variant=\"solid\"\r\n                                                            size=\"md\"\r\n                                                            style={{ marginLeft: 20, marginRight: 20 }}\r\n                                                        >\r\n                                                            Log in\r\n                                                 </CUIButton>\r\n                                                    </Stack>\r\n                                                </Card.Body>\r\n\r\n                                                {/**student footer section */}\r\n                                                <Card.Footer className=\"text-muted\" style={{ background: 'yellows' }} >\r\n                                                    <Card.Text style={{ fontSize: 12 }}>\r\n                                                        Forgot password?\r\n                                         </Card.Text>\r\n                                                </Card.Footer>\r\n                                            </Container>\r\n                                        </Flip>\r\n                                        :\r\n                                        <div></div>\r\n                                    }\r\n\r\n\r\n                                </Card>\r\n                            </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </ChakraProvider>\r\n        )\r\n    }\r\n\r\n    switch_to_staff_login_section() {\r\n        this.setState({ staff_login_tab_selected: true })\r\n        this.setState({ student_login_tab_selected: false })\r\n    }\r\n\r\n    switch_to_student_login_section() {\r\n        this.setState({ student_login_tab_selected: true })\r\n        this.setState({ staff_login_tab_selected: false })\r\n    }\r\n\r\n\r\n    staff_login(toast) {\r\n\r\n        /**removing white space */\r\n        try {\r\n            this.setState({ staff_username: this.state.staff_username.toString().trim() })\r\n            this.setState({ staff_password: this.state.staff_password.toString().trim() })\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n\r\n        /**if user doesnt provide all fields */\r\n        if ((!this.state.staff_username) || (!this.state.staff_password)) {\r\n\r\n            /**toast 5 */\r\n            toast({\r\n                duration: 2000, /**use null to make it not disappear */\r\n                isClosable: true,\r\n                position: \"top\",\r\n                render: () => (\r\n\r\n                    /**toast shadow */\r\n                    <div className=\"shadow-lg rounded\">\r\n                        <Box color='white' style={{ background: '#FF443D', borderRadius: 5 }}>\r\n                            <div style={{ width: '100%', display: 'flex', paddingTop: 5, paddingBottom: 5 }}>\r\n\r\n                                {/**error icon */}\r\n                                <div style={{ width: '10%', background: 'yellows', display: 'flex', justifyContent: 'center', paddingTop: 3 }}>\r\n                                    <Error fontSize='small' />\r\n                                </div>\r\n\r\n                                {/**toast message */}\r\n                                <div style={{ width: '80%', display: 'flex', flexDirection: 'column', justifyContent: 'flex-start', paddingLeft: 10 }}>\r\n                                    <Typography>Login failed!</Typography>\r\n                                    <Typography style={{ fontSize: 12 }}>Provide all details.</Typography>\r\n                                </div>\r\n\r\n                                {/**close icon */}\r\n                                <div style={{ width: '10%', display: 'flex', justifyContent: 'center' }}>\r\n                                    <Close fontSize='small' onClick={() => { toast.closeAll() }} />\r\n                                </div>\r\n                            </div>\r\n                        </Box>\r\n                    </div>\r\n                )\r\n            })\r\n        }\r\n\r\n        /**if user provides all fields */\r\n        else {\r\n            /**show backdrop while we communicate with the backend */\r\n            this.show_backdrop()\r\n\r\n            /**verify login credentials */\r\n            fetch(server + 'view_staff_users.php', {\r\n                method: 'POST',\r\n                headers: {\r\n                    'Accept': 'text/plain',\r\n                    'Content-Type': 'text/plain'\r\n                },\r\n                body: JSON.stringify({\r\n                    staff_usernameDB: this.state.staff_username,\r\n                    staff_passwordDB: this.state.staff_password\r\n                })\r\n            }).then((response) => response.text())\r\n                .then((responseJson) => {\r\n\r\n                    // console.log(responseJson)\r\n\r\n                    var jsonconvertedrows = JSON.parse(responseJson)\r\n                    var finaldata = JSON.stringify(jsonconvertedrows)\r\n\r\n\r\n                    if (finaldata === '\"no search results\"') {\r\n                        /**if account doesnt exist */\r\n\r\n                        //hide backdrop\r\n                        this.hide_backdrop()\r\n\r\n                        this.show_modal('Login failed!', 'Staff could not be found')\r\n                        console.log('staff details cannot be found!')\r\n                    }\r\n\r\n                    else {\r\n                        /**if account exists */\r\n\r\n                        /**transfer the id of the staff in the db to the globalmodule variable */\r\n                        for (var count = 0; count < jsonconvertedrows.length; count++) {\r\n                            modulevariables.global_staff_id = jsonconvertedrows[count].staff_id\r\n                        }\r\n\r\n                        this._asyncStore_save_staff_id()    /**save the staff's id into our local storage */\r\n\r\n                        this.setState({ staff_redirect: true }) /**finally redirect to the dashboard */\r\n                    }\r\n\r\n                }, err => {\r\n                    /**connection to server error */\r\n\r\n                    //hide backdrop\r\n                    this.hide_backdrop()\r\n\r\n                    console.log('internet error: ', err)\r\n                    this.show_modal('Login failed!', 'Please check your internet connection')\r\n                })\r\n        }\r\n\r\n    }\r\n\r\n    student_login(toast) {\r\n        // this.setState({ student_redirect: true })\r\n\r\n        /**removing white space */\r\n        try {\r\n            this.setState({ student_number: this.state.student_number.toString().trim() })\r\n            this.setState({ student_password: this.state.student_password.toString().trim() })\r\n        } catch (e) {\r\n            console.log(e)\r\n        }\r\n\r\n        /**if user doesnt provide all fields */\r\n        if ((!this.state.student_number) || (!this.state.student_password)) {\r\n\r\n            toast({\r\n                duration: 2000, /**use null to make it not disappear */\r\n                isClosable: true,\r\n                position: \"top\",\r\n                render: () => (\r\n\r\n                    /**toast shadow */\r\n                    <div className=\"shadow-lg rounded\">\r\n                        <Box color='white' style={{ background: '#FF443D', borderRadius: 5 }}>\r\n                            <div style={{ width: '100%', display: 'flex', paddingTop: 5, paddingBottom: 5 }}>\r\n\r\n                                {/**error icon */}\r\n                                <div style={{ width: '10%', background: 'yellows', display: 'flex', justifyContent: 'center', paddingTop: 3 }}>\r\n                                    <Error fontSize='small' />\r\n                                </div>\r\n\r\n                                {/**toast message */}\r\n                                <div style={{ width: '80%', display: 'flex', flexDirection: 'column', justifyContent: 'flex-start', paddingLeft: 10 }}>\r\n                                    <Typography>Login failed!</Typography>\r\n                                    <Typography style={{ fontSize: 12 }}>Provide all details.</Typography>\r\n                                </div>\r\n\r\n                                {/**close icon */}\r\n                                <div style={{ width: '10%', display: 'flex', justifyContent: 'center' }}>\r\n                                    <Close fontSize='small' onClick={() => { toast.closeAll() }} />\r\n                                </div>\r\n                            </div>\r\n                        </Box>\r\n                    </div>\r\n                )\r\n            })\r\n\r\n        }\r\n\r\n        /**if user provides all fields */\r\n        else {\r\n\r\n            /**first check if the student number field was only numbers */\r\n            const re = /^[0-9\\b]+$/\r\n\r\n            /**if user entered numbers */\r\n            if (re.test(this.state.student_number)) {\r\n\r\n                /**show backdrop while we communicate with the backend */\r\n                this.show_backdrop()\r\n\r\n                /**verify login credentials */\r\n                fetch(server + 'student_login.php', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Accept': 'text/plain',\r\n                        'Content-Type': 'text/plain'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        student_numberDB: this.state.student_number,\r\n                        student_passwordDB: this.state.student_password\r\n                    })\r\n                }).then((response) => response.text())\r\n                    .then((responseJson) => {\r\n\r\n                        // console.log(responseJson)\r\n\r\n                        var jsonconvertedrows = JSON.parse(responseJson)\r\n                        var finaldata = JSON.stringify(jsonconvertedrows)\r\n\r\n                        if (finaldata === '\"no search results\"') {\r\n                            /**if account doesnt exist */\r\n\r\n                            //hide backdrop\r\n                            this.hide_backdrop()\r\n\r\n                            console.log('student details cannot be found!')\r\n                            this.show_modal('Login failed', 'Student details could not be found')\r\n                        }\r\n\r\n                        else {\r\n                            /**if account exists */\r\n\r\n                            /**transfer the id of the student in the db to the globalmodule variable */\r\n                            for (var count = 0; count < jsonconvertedrows.length; count++) {\r\n                                modulevariables.global_student_id = jsonconvertedrows[count].student_id\r\n                            }\r\n\r\n                            this._asyncStore_save_student_id()  /**save the student's id into our local storage */\r\n\r\n                            this.hide_backdrop()\r\n\r\n                            this.setState({ student_redirect: true })   /**finally redirect to the dashboard */\r\n                        }\r\n                    }, err => {\r\n                        /**connection to server error */\r\n\r\n                        //hide backdrop\r\n                        this.hide_backdrop()\r\n\r\n                        console.log('internet error: ', err)\r\n                        this.show_modal('Login failed!', 'Please check your internet connection')\r\n                    })\r\n            }\r\n\r\n            else {\r\n                /**if user didnt enter numbers in the student number textbox */\r\n                toast({\r\n                    duration: 2000, /**use null to make it not disappear */\r\n                    isClosable: true,\r\n                    position: \"top\",\r\n                    render: () => (\r\n\r\n                        /**toast shadow */\r\n                        <div className=\"shadow-lg rounded\">\r\n                            <Box color='white' style={{ background: '#FF443D', borderRadius: 5 }}>\r\n                                <div style={{ width: '100%', display: 'flex', paddingTop: 5, paddingBottom: 5 }}>\r\n\r\n                                    {/**error icon */}\r\n                                    <div style={{ width: '10%', background: 'yellows', display: 'flex', justifyContent: 'center', paddingTop: 3 }}>\r\n                                        <Error fontSize='small' />\r\n                                    </div>\r\n\r\n                                    {/**toast message */}\r\n                                    <div style={{ width: '80%', display: 'flex', flexDirection: 'column', justifyContent: 'flex-start', paddingLeft: 10 }}>\r\n                                        <Typography>Login failed!</Typography>\r\n                                        <Typography style={{ fontSize: 12 }}>Student number field is incorrect.</Typography>\r\n                                    </div>\r\n\r\n                                    {/**close icon */}\r\n                                    <div style={{ width: '10%', display: 'flex', justifyContent: 'center' }}>\r\n                                        <Close fontSize='small' onClick={() => { toast.closeAll() }} />\r\n                                    </div>\r\n                                </div>\r\n                            </Box>\r\n                        </div>\r\n                    )\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    _asyncStore_save_staff_id = async () => {\r\n        try {\r\n            await AsyncStorage.setItem('stored_staff_id', modulevariables.global_staff_id);\r\n            // console.log('the staff id stored is: ', modulevariables.global_staff_id)\r\n        } catch (error) {\r\n            // Error saving data\r\n            console.log(\"async storage error: \", error)\r\n        }\r\n    }\r\n\r\n    _asyncStore_save_student_id = async () => {\r\n        try {\r\n            await AsyncStorage.setItem('stored_student_id', modulevariables.global_student_id);\r\n            // console.log('the student id stored is: ', modulevariables.global_student_id)\r\n        } catch (error) {\r\n            // error saving data\r\n            console.log(\"asyn storage error: \", error)\r\n        }\r\n    }\r\n\r\n    show_modal(title, content) {\r\n        this.setState({ modal_title: title }, () => {\r\n            this.setState({ modal_content: content }, () => {\r\n                this.setState({ display_modal: true })\r\n            })\r\n        })\r\n    }\r\n\r\n    close_modal() {\r\n        this.setState({ display_modal: false })\r\n    }\r\n\r\n    show_backdrop() {\r\n        this.setState({ display_backdrop: true })\r\n    }\r\n\r\n    hide_backdrop() {\r\n        this.setState({ display_backdrop: false })\r\n    }\r\n\r\n}\r\n// export default Landing;\r\n\r\nexport default function (props) {\r\n    const toast = useToast();   /**toast 3 */\r\n    return <Landing {...props} toast={toast} />\r\n}","C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\pages\\Staff_Dashboard\\Staff_Dashboard.js",["90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108","109","110","111","112","113"],"import React, { Component } from 'react';\r\nimport '../Staff_Dashboard/Staff_Dashboard.css'\r\nimport { BrowserRouter, Route, Switch, Link } from \"react-router-dom\"\r\n\r\n/**chakra ui imports */\r\nimport {\r\n    ChakraProvider, Button as CUIButton,\r\n    ButtonGroup, SimpleGrid, Box, Grid, GridItem, Wrap,\r\n    WrapItem, Avatar, Input, Stack, HStack, VStack, flexbox\r\n} from \"@chakra-ui/react\"\r\nimport { FaFacebook, FaTwitter } from \"react-icons/fa\"\r\n\r\n/**material ui imports */\r\nimport {\r\n    Button as MUIButton, List,\r\n    ListItem, ListItemIcon, ListItemText\r\n} from '@material-ui/core';\r\nimport { PeopleIcon } from '@material-ui/icons'\r\nimport Icon from '@material-ui/core/Icon';\r\n\r\n/**react bootstrap imports */\r\nimport {\r\n    Button as RBButton, Container, Row, Col,\r\n    Card,\r\n    CardDeck\r\n} from 'react-bootstrap';\r\n\r\n/**dashboard menu items */\r\nimport ScheduleComponent from './Dashboard_menu_items/Schedule/Schedule'\r\nimport ChatroomComponent from './Dashboard_menu_items/Chatroom/Chatroom'\r\nimport ForumComponent from './Dashboard_menu_items/Forum/Forum'\r\n\r\nimport { AsyncStorage } from 'AsyncStorage'\r\nimport { Redirect } from 'react-router'\r\nimport modulevariables from '../Modulevariables';\r\n\r\n/**fontawesome icon imports */\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faTimes, faBars, faCalendar, faBook,\r\n    faComment\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nlibrary.add(faTimes, faBars, faCalendar, faBook, faComment)\r\n\r\nclass Staff_Dashboard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n\r\n            /**hamburger menu is hidden by default when page is viewed on desktop */\r\n            mobileview_menu_opened: false,\r\n\r\n            /**our default selected item in the drawer is schedule\r\n             * the value changes when the user selects a different item in th drawer\r\n             * and we give the selected drawer item css properties to make it active */\r\n            selected_drawer_item: 'schedule',\r\n\r\n            redirect_to_landingpage: false,\r\n        }\r\n\r\n    }\r\n\r\n    /**mobile view function to toggle the drawer */\r\n    toggle_drawer = () => {\r\n        this.setState({ mobileview_menu_opened: !this.state.mobileview_menu_opened })\r\n    }\r\n\r\n    /**after selecting any list item from the drawer in mobile view we want to automatically close the drawer */\r\n    close_drawer() {\r\n        this.setState({ mobileview_menu_opened: false })\r\n    }\r\n\r\n    /**set the selected drawer item to be active to differentiate it from other list items */\r\n    set_active_drawer_item(drawer_item_name) {\r\n        this.setState({ selected_drawer_item: drawer_item_name })\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        /**for logout */\r\n        if (this.state.redirect_to_landingpage) {\r\n            return <Redirect push to=\"/\" />;\r\n        }\r\n\r\n        return (\r\n            <BrowserRouter>\r\n                <ChakraProvider>\r\n\r\n                    {/**page setup */}\r\n                    <div className=\"pagesetup\">\r\n\r\n                        {/** column 1 of page setup...drawer menu */}\r\n                        <div className=\"sidemenu_column\">\r\n\r\n                            {/**nav menu container */}\r\n                            <nav className=\"navmenu_container\">\r\n\r\n                                {/**nav menu header */}\r\n                                <div className=\"navmenu_header\" >\r\n\r\n                                    {/**header avatar */}\r\n                                    <Wrap className=\"avatar_wrapper_container\" >\r\n                                        <WrapItem>\r\n                                            <Avatar size=\"sm\" name=\"Dan Abrahmov\" src=\"https://bit.ly/dan-abramov\" />\r\n                                        </WrapItem>\r\n                                    </Wrap>\r\n\r\n                                    {/**header title */}\r\n                                    <Wrap>\r\n                                        <WrapItem style={{ paddingLeft: 25 }}>\r\n                                            <h1>Administrator</h1>\r\n                                        </WrapItem>\r\n                                    </Wrap>\r\n\r\n                                    {/**drawer menu icon only visible when switched to mobile view*/}\r\n                                    <div className=\"menu_icon\" onClick={this.toggle_drawer}>\r\n                                        <FontAwesomeIcon icon={this.state.mobileview_menu_opened ? faTimes : faBars} />{/**change menu icon when toggled */}\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                                {/**drawer items */}\r\n                                <ul className={this.state.mobileview_menu_opened ? 'mobileview_drawer_list' : 'desktop_drawer_list'}>\r\n\r\n                                    {/**schedule list item */}\r\n                                    <li style={{ paddingTop: 20 }} onClick={() => {\r\n                                        this.close_drawer()\r\n                                        this.set_active_drawer_item('schedule')\r\n                                    }}>\r\n                                        <Link to=\"/staff/dashboard/schedule\" style={{ textDecoration: 'none' }}>\r\n                                            <HStack spacing=\"10px\" className={this.state.selected_drawer_item === 'schedule' ? 'selected_drawer_item' : 'unselected_drawer_item'}>\r\n\r\n                                                {/* <Icon fontSize='small' >star</Icon> */}\r\n                                                <FontAwesomeIcon icon={faCalendar} size=\"sm\" /> <p style={{ fontSize: 14 }}>Schedule</p>\r\n                                            </HStack>\r\n                                        </Link>\r\n                                    </li>\r\n\r\n                                    {/**forum list item */}\r\n                                    <li style={{ paddingTop: 20 }} onClick={() => {\r\n                                        this.close_drawer()\r\n                                        this.set_active_drawer_item('forum')\r\n                                    }}>\r\n                                        <Link to=\"/staff/dashboard/forum\" style={{ textDecoration: 'none' }}>\r\n                                            <HStack spacing=\"10px\" className={this.state.selected_drawer_item === 'forum' ? 'selected_drawer_item' : 'unselected_drawer_item'}>\r\n                                                <FontAwesomeIcon icon={faBook} size=\"sm\" /> <p style={{ fontSize: 14, paddingRight: 25 }}>Forum</p>\r\n                                            </HStack>\r\n                                        </Link>\r\n                                    </li>\r\n\r\n                                    {/**chatroom list item */}\r\n                                    <li style={{ paddingTop: 20 }} onClick={() => {\r\n                                        this.close_drawer()\r\n                                        this.set_active_drawer_item('chatroom')\r\n                                    }}>\r\n                                        <Link to=\"/staff/dashboard/chatroom\" style={{ textDecoration: 'none' }}>\r\n                                            <HStack spacing=\"10px\" className={this.state.selected_drawer_item === 'chatroom' ? 'selected_drawer_item' : 'unselected_drawer_item'}>\r\n                                                <FontAwesomeIcon icon={faComment} size=\"sm\" /> <p style={{ fontSize: 14 }}>Chatroom</p>\r\n                                            </HStack>\r\n                                        </Link>\r\n                                    </li>\r\n\r\n                                    {/**logout button would appear as part of the drawer items  when switched to mobile view*/}\r\n                                    <li style={{ paddingTop: 20 }} className=\"logout_button_mobile_view\" >\r\n                                        <MUIButton\r\n                                            fullWidth variant=\"contained\" color=\"primary\"\r\n                                            onClick={() => { this.logout() }}\r\n                                        >\r\n                                            Logout\r\n                                             </MUIButton>\r\n                                    </li>\r\n\r\n                                </ul>\r\n\r\n                                {/**logout bottom here appears only in desktop view */}\r\n                                <div className=\"logout_container_desktop_view\">\r\n                                    <MUIButton\r\n                                        fullWidth variant=\"contained\" color=\"primary\"\r\n                                        onClick={() => { this.logout() }}\r\n                                    >\r\n                                        Logout\r\n                                    </MUIButton>\r\n                                </div>\r\n\r\n                            </nav>\r\n                        </div>\r\n\r\n                        {/**column 2 of page setup\r\n                         * pages of the selected link from the drawer will show here */}\r\n                        <div style={{ width: '100%' }}>\r\n                            <Switch>\r\n                                <Route exact path=\"/staff/dashboard/schedule\" component={ScheduleComponent} />\r\n                                <Route exact path=\"/staff/dashboard/forum\" component={ForumComponent} />\r\n                                <Route exact path=\"/staff/dashboard/chatroom\" component={ChatroomComponent} />\r\n                                <Route render={() => <ScheduleComponent />} /> {/**default page to open */}\r\n                            </Switch>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </ChakraProvider>\r\n            </BrowserRouter >\r\n        )\r\n    }\r\n\r\n    logout() {\r\n        modulevariables.global_staff_id = null;\r\n        this._asyncStore_clear_staff_id();\r\n\r\n        /**navigate to landing page */\r\n        this.setState({ redirect_to_landingpage: true })\r\n    }\r\n\r\n    _asyncStore_clear_staff_id = async () => {\r\n        try {\r\n            await AsyncStorage.removeItem('stored_staff_id');\r\n            modulevariables.global_staff_id = null;\r\n        } catch (error) {\r\n            // Error clearing data\r\n            console.log(\"async storage error: \", error)\r\n        }\r\n    }\r\n\r\n}\r\nexport default Staff_Dashboard;","C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\pages\\Student_Dashboard\\Student_Dashboard.js",["114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138"],"import React, { Component } from 'react';\r\nimport '../Student_Dashboard/Student_Dashboard.css'\r\nimport { BrowserRouter, Route, Switch, Link } from \"react-router-dom\"\r\n\r\n/**chakra ui imports */\r\nimport {\r\n    ChakraProvider, Button as CUIButton,\r\n    ButtonGroup, SimpleGrid, Box, Grid, GridItem, Wrap,\r\n    WrapItem, Avatar, Input, Stack, HStack, VStack, flexbox\r\n} from \"@chakra-ui/react\"\r\nimport { FaFacebook, FaTwitter } from \"react-icons/fa\"\r\n\r\n/**material ui imports */\r\nimport {\r\n    Button as MUIButton, List,\r\n    ListItem, ListItemIcon, ListItemText\r\n} from '@material-ui/core';\r\nimport { PeopleIcon } from '@material-ui/icons'\r\nimport Icon from '@material-ui/core/Icon';\r\n\r\n/**react bootstrap imports */\r\nimport {\r\n    Button as RBButton, Container, Row, Col,\r\n    Card,\r\n    CardDeck\r\n} from 'react-bootstrap';\r\n\r\n/**dashboard menu items */\r\nimport BookingComponent from './Dashboard_menu_items/Booking/Booking'\r\nimport MessagesComponent from './Dashboard_menu_items/Messages/Messages'\r\nimport ChatroomComponent from './Dashboard_menu_items/Chatroom/Chatroom'\r\n\r\n/**fontawesome icon imports */\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {\r\n    faTimes, faBars, faCalendar, faBook,\r\n    faComment\r\n} from '@fortawesome/free-solid-svg-icons'\r\nimport { library } from '@fortawesome/fontawesome-svg-core'\r\nimport Booking from './Dashboard_menu_items/Booking/Booking';\r\nlibrary.add(faTimes, faBars, faCalendar, faBook, faComment)\r\n\r\nclass Student_Dashboard extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n\r\n            /**hamburger menu is hidden by default when page is viewed on desktop */\r\n            mobileview_menu_opened: false,\r\n\r\n            /**our default selected item in the drawer is booking\r\n             * the value changes when the user selects a different item in th drawer\r\n             * and we give the selected drawer item css properties to make it active */\r\n            selected_drawer_item: 'booking'\r\n        }\r\n\r\n    }\r\n\r\n    /**mobile view function to toggle the drawer */\r\n    toggle_drawer = () => {\r\n        this.setState({ mobileview_menu_opened: !this.state.mobileview_menu_opened })\r\n    }\r\n\r\n    /**after selecting any list item from the drawer in mobile view we want to automatically close the drawer */\r\n    close_drawer() {\r\n        this.setState({ mobileview_menu_opened: false })\r\n    }\r\n\r\n    /**set the selected drawer item to be active to differentiate it from other list items */\r\n    set_active_drawer_item(drawer_item_name) {\r\n        this.setState({ selected_drawer_item: drawer_item_name })\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <BrowserRouter>\r\n                <ChakraProvider>\r\n\r\n                    {/**page setup */}\r\n                    <div className=\"pagesetups\">\r\n\r\n                        {/** column 1 of page setup...drawer menu */}\r\n                        <div className=\"sidemenu_columns\">\r\n\r\n                            {/**nav menu container */}\r\n                            <nav className=\"navmenu_containers\">\r\n\r\n                                {/**nav menu header */}\r\n                                <div className=\"navmenu_headers\" >\r\n\r\n                                    {/**header avatar */}\r\n                                    <Wrap className=\"avatar_wrapper_containers\" >\r\n                                        <WrapItem>\r\n                                            <Avatar size=\"sm\" name=\"Dan Abrahmov\" src=\"https://bit.ly/dan-abramov\" />\r\n                                        </WrapItem>\r\n                                    </Wrap>\r\n\r\n                                    {/**header title */}\r\n                                    <Wrap>\r\n                                        <WrapItem style={{ paddingLeft: 25 }}>\r\n                                            <h1>Student</h1>\r\n                                        </WrapItem>\r\n                                    </Wrap>\r\n\r\n                                    {/**drawer menu icon only visible when switched to mobile view*/}\r\n                                    <div className=\"menu_icons\" onClick={this.toggle_drawer}>\r\n                                        <FontAwesomeIcon icon={this.state.mobileview_menu_opened ? faTimes : faBars} />{/**change menu icon when toggled */}\r\n                                    </div>\r\n                                </div>\r\n\r\n\r\n                                {/**drawer items */}\r\n                                <ul className={this.state.mobileview_menu_opened ? 'mobileview_drawer_lists' : 'desktop_drawer_lists'}>\r\n\r\n                                    {/**booking list item */}\r\n                                    <li style={{ paddingTop: 20 }} onClick={() => {\r\n                                        this.close_drawer()\r\n                                        this.set_active_drawer_item('booking')\r\n                                    }}>\r\n                                        <Link to=\"/student/dashboard/booking\" style={{ textDecoration: 'none' }}>\r\n                                            <HStack spacing=\"10px\" className={this.state.selected_drawer_item === 'booking' ? 'selected_drawer_items' : 'unselected_drawer_items'}>\r\n\r\n                                                {/* <Icon fontSize='small' >star</Icon> */}\r\n                                                <FontAwesomeIcon icon={faCalendar} size=\"sm\" /> <p style={{ fontSize: 14 }}>Booking</p>\r\n                                            </HStack>\r\n                                        </Link>\r\n                                    </li>\r\n\r\n                                    {/**messages list item */}\r\n                                    <li style={{ paddingTop: 20 }} onClick={() => {\r\n                                        this.close_drawer()\r\n                                        this.set_active_drawer_item('messages')\r\n                                    }}>\r\n                                        <Link to=\"/student/dashboard/messages\" style={{ textDecoration: 'none' }}>\r\n                                            <HStack spacing=\"10px\" className={this.state.selected_drawer_item === 'messages' ? 'selected_drawer_items' : 'unselected_drawer_items'}>\r\n                                                <FontAwesomeIcon icon={faBook} size=\"sm\" /> <p style={{ fontSize: 14 }}>Messages</p>\r\n                                            </HStack>\r\n                                        </Link>\r\n                                    </li>\r\n\r\n                                    {/**chatroom list item */}\r\n                                    <li style={{ paddingTop: 20 }} onClick={() => {\r\n                                        this.close_drawer()\r\n                                        this.set_active_drawer_item('chatroom')\r\n                                    }}>\r\n                                        <Link to=\"/student/dashboard/chatroom\" style={{ textDecoration: 'none' }}>\r\n                                            <HStack spacing=\"10px\" className={this.state.selected_drawer_item === 'chatroom' ? 'selected_drawer_items' : 'unselected_drawer_items'}>\r\n                                                <FontAwesomeIcon icon={faComment} size=\"sm\" /> <p style={{ fontSize: 14 }}>Chatroom</p>\r\n                                            </HStack>\r\n                                        </Link>\r\n                                    </li>\r\n\r\n                                    {/**logout button would appear as part of the drawer items  when switched to mobile view*/}\r\n                                    <li style={{ paddingTop: 20 }} className=\"logout_button_mobile_views\" >\r\n                                        <MUIButton fullWidth variant=\"contained\" color=\"primary\" >Logout</MUIButton>\r\n                                    </li>\r\n\r\n                                </ul>\r\n\r\n                                {/**logout bottom here appears only in desktop view */}\r\n                                <div className=\"logout_container_desktop_views\">\r\n                                    <MUIButton fullWidth variant=\"contained\" color=\"primary\" >Logout</MUIButton>\r\n                                </div>\r\n\r\n                            </nav>\r\n                        </div>\r\n\r\n                        {/**column 2 of page setup\r\n                         * pages of the selected link from the drawer will show here */}\r\n                        <div style={{ width: '100%' }}>\r\n                            <Switch>\r\n                                <Route exact path=\"/student/dashboard/booking\" component={BookingComponent} />\r\n                                <Route exact path=\"/student/dashboard/messages\" component={MessagesComponent} />\r\n                                <Route exact path=\"/student/dashboard/chatroom\" component={ChatroomComponent} />\r\n                                <Route render={() => <BookingComponent />} /> {/**default page to open */}\r\n                            </Switch>\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                </ChakraProvider>\r\n            </BrowserRouter >\r\n        )\r\n    }\r\n\r\n\r\n}\r\nexport default Student_Dashboard;","C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\pages\\Staff_Dashboard\\Dashboard_menu_items\\Chatroom\\Chatroom.js",["139"],"import React, { Component } from 'react';\r\n\r\nclass Chatroom extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div style={{ height: '100vh', display: 'flex', background: 'transparent', justifyContent: 'center', alignItems: 'center' }}>Chatroom Page</div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default Chatroom;","C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\pages\\Staff_Dashboard\\Dashboard_menu_items\\Forum\\Forum.js",["140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168"],"import React, { Component } from 'react';\r\nimport '../Forum/Forum.css'\r\n\r\n/**chakra ui imports */\r\nimport {\r\n    ChakraProvider, Button as CUIButton, Spinner,\r\n    ButtonGroup, Stack, SimpleGrid, Box, Grid, GridItem,\r\n    Popover,\r\n    PopoverTrigger,\r\n    PopoverContent,\r\n    PopoverHeader,\r\n    PopoverBody,\r\n    PopoverFooter,\r\n    PopoverArrow,\r\n    PopoverCloseButton,\r\n\r\n} from \"@chakra-ui/react\"\r\nimport { MdBuild, MdCall, MdCheckCircle, MdSettings } from \"react-icons/md\"\r\nimport { FaFacebook, FaTwitter } from \"react-icons/fa\"\r\n\r\n/**material ui imports */\r\nimport {\r\n    Button as MUIButton, TextField, List, ListItem,\r\n    FormControl, InputLabel, OutlinedInput,\r\n    InputAdornment, IconButton, ListItemIcon, Checkbox, ListItemText,\r\n    ListItemSecondaryAction, Divider, Typography,\r\n} from '@material-ui/core';\r\nimport {\r\n    Visibility, VisibilityOff, Search, Delete,\r\n    Reply, ContactSupportOutlined, Create,\r\n} from '@material-ui/icons'\r\n\r\n/**react bootstrap imports */\r\nimport {\r\n    Button as RBButton, Container, Row, Col,\r\n    Dropdown, DropdownButton, Table\r\n} from 'react-bootstrap';\r\n\r\n/**react-bootstrap table-2 */\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\nimport overlayFactory from 'react-bootstrap-table2-overlay';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\r\n\r\n\r\n//table column headers\r\nconst columns = [\r\n\r\n    /********************** ID COLUMN ************************* */\r\n    {\r\n        dataField: 'id',\r\n        text: 'Id',\r\n        headerStyle: (colum, colIndex) => {\r\n            return {\r\n                width: '5%', textAlign: 'center', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis'\r\n            };\r\n        },\r\n        align: 'center',\r\n        hidden: true,\r\n    },\r\n\r\n\r\n    /********************** NAME COLUMN ************************* */\r\n    {\r\n        dataField: 'name',\r\n        text: 'Name',\r\n        headerStyle: (colum, colIndex) => {\r\n            return {\r\n                width: '20%', textAlign: 'center', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis'\r\n            };\r\n        },\r\n        title: (cell_content, row, rowIndex, colIndex) => `${cell_content}`,\r\n        style: (cell, row, rowIndex, colIndex) => {\r\n            return {\r\n                whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis'\r\n            }\r\n        },\r\n    },\r\n\r\n    /********************** MESSAGE COLUMN ************************* */\r\n    {\r\n        dataField: 'message',\r\n        text: 'Message',\r\n        headerStyle: (colum, colIndex) => {\r\n            return {\r\n                width: '55%', textAlign: 'center'\r\n            };\r\n        },\r\n        title: (cell_content, row, rowIndex, colIndex) => `${cell_content}`,\r\n        style: (cell, row, rowIndex, colIndex) => {\r\n            return {\r\n                whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis'\r\n            }\r\n        },\r\n    },\r\n\r\n    /********************** TIME COLUMN ************************* */\r\n    {\r\n        dataField: 'time',\r\n        text: 'Time',\r\n        headerStyle: (colum, colIndex) => {\r\n            return {\r\n                width: '10%', textAlign: 'center', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis'\r\n            };\r\n        },\r\n        align: 'center',\r\n        style: (cell, row, rowIndex, colIndex) => {\r\n            return {\r\n                whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis'\r\n            }\r\n        },\r\n    },\r\n\r\n    /********************** ACTIONS COLUMN ************************* */\r\n    {\r\n        dataField: 'actions',\r\n        text: 'Actions',\r\n        headerStyle: (colum, colIndex) => {\r\n            return {\r\n                width: '10%', textAlign: 'center', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis'\r\n            };\r\n        },\r\n        align: 'center',\r\n    },\r\n];\r\n\r\n//data for your table\r\nconst data = [\r\n    {\r\n        id: 1,\r\n        name: 'Samuel Asare Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n\r\n    {\r\n        id: 2,\r\n        name: 'Venom Mobius Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Samuel Asare Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n\r\n    {\r\n        id: 4,\r\n        name: 'Venom Mobius Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n    {\r\n        id: 5,\r\n        name: 'Samuel Asare Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n\r\n    {\r\n        id: 6,\r\n        name: 'Venom Mobius Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n    {\r\n        id: 7,\r\n        name: 'Samuel Asare Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n\r\n    {\r\n        id: 8,\r\n        name: 'Venom Mobius Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n    {\r\n        id: 9,\r\n        name: 'Samuel Asare Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n\r\n    {\r\n        id: 10,\r\n        name: 'Venom Mobius Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n    {\r\n        id: 11,\r\n        name: 'Samuel Asare Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n\r\n    {\r\n        id: 12,\r\n        name: 'Venom Mobius Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n    {\r\n        id: 13,\r\n        name: 'Samuel Asare Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n\r\n    {\r\n        id: 14,\r\n        name: 'Venom Mobius Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n    {\r\n        id: 15,\r\n        name: 'Samuel Asare Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n\r\n    {\r\n        id: 16,\r\n        name: 'Venom Mobius Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n    {\r\n        id: 17,\r\n        name: 'Samuel Asare Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n\r\n    {\r\n        id: 18,\r\n        name: 'Venom Mobius Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n    {\r\n        id: 19,\r\n        name: 'Samuel Asare Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n\r\n    {\r\n        id: 20,\r\n        name: 'Venom Mobius Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n    {\r\n        id: 21,\r\n        name: 'Samuel Asare Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n\r\n    {\r\n        id: 22,\r\n        name: 'Venom Mobius Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n\r\n];\r\n\r\n/**adding events to a row */\r\nconst rowEvents = {\r\n    onClick: (e, row, rowIndex) => {\r\n        // console.log('event data of row: ', e)\r\n        // console.log('content of row: ', row)\r\n        // console.log('index of row: ', rowIndex)\r\n    }\r\n};\r\n\r\n/**style content in the row */\r\nconst rowStyle = (row, rowIndex) => {\r\n    return { cursor: 'pointer' };\r\n};\r\n\r\n\r\n\r\nclass Forum extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            display_new_message_popover: false\r\n        }\r\n    }\r\n\r\n    open() {\r\n        this.setState({ display_new_message_popover: !this.state.display_new_message_popover })\r\n    }\r\n\r\n    close() {\r\n        this.setState({ display_new_message_popover: false })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <ChakraProvider>\r\n\r\n                <Container fluid style={{ background: 'transparent', height: '100vh', overflow: 'hidden' }}>\r\n\r\n                    {/**row 1 of container containing the search box */}\r\n                    <Row style={{ background: 'transparent' }}>\r\n                        {/**search box takes half of the screen on desktops and full on mobile */}\r\n                        <Col xl={6}>\r\n                            <FormControl variant=\"outlined\" style={{ width: '100%', paddingTop: 15, paddingBottom: 10 }}>\r\n                                <OutlinedInput\r\n                                    style={{ height: 40 }}\r\n                                    placeholder=\"Search\"\r\n                                    endAdornment={\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton aria-label=\"toggle password visibility\" edge=\"end\">\r\n                                                <Search />\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    }\r\n                                />\r\n                            </FormControl>\r\n                        </Col>\r\n                        <Col xl={6}></Col>\r\n                    </Row>\r\n\r\n\r\n                    {/**row 2 of container containing messages using the react-bootstrap-table-2 component*/}\r\n                    <Row>\r\n\r\n                        <Col className=\"somecol\">\r\n\r\n                            <div className=\"dropdown_fab_container\">\r\n\r\n                                {/**filter messages dropdown menu */}\r\n                                <DropdownButton id=\"dropdown-basic-button\"\r\n                                    title=\"All messages\">\r\n                                    <Dropdown.Item href=\"#\">All</Dropdown.Item>\r\n                                    <Dropdown.Item href=\"#\">Unread</Dropdown.Item>\r\n                                    <Dropdown.Item href=\"#\">Read</Dropdown.Item>\r\n                                </DropdownButton>\r\n\r\n\r\n                                <div\r\n                                    className=\"fab\"\r\n                                    onClick={() => { this.new_message_popover() }}\r\n                                >\r\n                                    <Create fontSize='small' style={{ color: 'white', cursor: 'pointer' }} />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div>\r\n                                <BootstrapTable\r\n                                    keyField='id'   //This should be the name of a property that is unique for each item in your dataset\r\n                                    data={data}\r\n                                    columns={columns}\r\n                                    // loading={false}\r\n                                    // overlay={overlayFactory({   //react-bootstrap-table will render overlay if only loading is set to true\r\n                                    //     spinner: true,\r\n                                    //     className: \"table_overlay\"\r\n                                    // })}\r\n                                    bootstrap4={true} //true to indicate your bootstrap version is 4. Default version is 3.\r\n                                    noDataIndication={() => { alert('noting in the table') }}   //a callback function which return anything that will be showed in the table when data is empty. ie. data=[]\r\n                                    striped={false}  //for adding zebra-stripes to a table.\r\n                                    bordered={false} //for adding borders to a table and table cells.\r\n                                    hover={true}    //Same as bootstrap .table-hover class for adding mouse hover effect (grey background color) on table rows.\r\n                                    condensed={false}   //for making a table more compact by cutting cell padding in half\r\n                                    classes=\"table_container\"   //Customize class on table element.\r\n                                    wrapperClasses=\"wrapper_class\"    //Customize class on the outer element which wrap up the table element.\r\n                                    headerClasses=\"header_class\"    //Customize class on the header row(tr).\r\n                                    headerWrapperClasses=\"header_wrapper_class\" //Customize class on thead.\r\n                                    bodyClasses=\"body_class\"    //Customize class on tbody.\r\n\r\n                                    //remote\r\n                                    // cellEdit\r\n                                    // selectRow\r\n\r\n                                    rowStyle={rowStyle} // Custom the style of table rows\r\n                                    rowClasses=\"row_class\"   //Custom the style of table rows\r\n                                    rowEvents={rowEvents}   //Custom the events on row\r\n                                    // hiddenRows={hiddenRows}   //this props accept an array of row keys\r\n                                    // defaultSorted={defaultSorted}  //define which column should be sorted by default when the data is rendered\r\n\r\n                                    //pagination\r\n                                    //filter\r\n                                    // onTableChange\r\n                                    // onDataSizeChange\r\n\r\n                                    pagination={paginationFactory({\r\n                                        // page, // Specify the current page. It's necessary when remote is enabled\r\n                                        // sizePerPage, // Specify the size per page. It's necessary when remote is enabled\r\n                                        // totalSize, // Total data size. It's necessary when remote is enabled\r\n\r\n                                        pageStartIndex: 1, // value to be written as the first page on the pagination bar\r\n                                        paginationSize: 3,  // the pagination bar size or number of selections that can be made on the pagination bar\r\n                                        showTotal: false, // display pagination information eg. (showing 1-10 of 500 rows)\r\n                                        sizePerPageList: [\r\n                                            // A numeric array is also available: [5, 10]. the purpose of above example is custom the text\r\n                                            //first value is item to start\r\n                                            //second value is item to end\r\n                                            { text: '1', value: 14 },\r\n                                        ],\r\n\r\n                                        withFirstAndLast: false, // show the first and last page button\r\n                                        firstPageText: 'First', // the text of first page button\r\n                                        firstPageTitle: 'Go to first', // the tooltip of first page button\r\n                                        lastPageText: 'Last', // the text of last page button\r\n                                        lastPageTitle: 'Go to last', // the tooltip of last page button\r\n\r\n                                        alwaysShowAllBtns: true, // always show the next and previous page button\r\n                                        prePageText: 'Prev', // the text of previous page button\r\n                                        prePageTitle: 'Go to previous', // the tooltip of previous page button\r\n                                        nextPageText: 'Next', // the text of next page button\r\n                                        nextPageTitle: 'Go to next', // the toottip of next page button\r\n\r\n                                        hideSizePerPage: true, // hide the size per page dropdown\r\n                                        hidePageListOnlyOnePage: true, // hide pagination bar when only one page, default is false\r\n\r\n                                        onPageChange: (page, sizePerPage) => {\r\n                                            // callback function when page was changing\r\n                                            // alert('changing page')\r\n                                            console.log('size per page: ', sizePerPage);\r\n                                            console.log('page: ', page);\r\n                                        },\r\n\r\n                                        // onSizePerPageChange: (sizePerPage, page) => {\r\n                                        //     // callback function when page size was changing\r\n                                        //     console.log('size per page: ', sizePerPage);\r\n                                        //     console.log('page: ', page);\r\n                                        // },\r\n\r\n                                        // paginationTotalRenderer: (from, to, size) => { ... }  // custom the pagination total\r\n                                    })}\r\n\r\n                                    filter={filterFactory()}\r\n                                />\r\n                            </div>\r\n\r\n\r\n\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/**popover display */}\r\n                    <div style={{\r\n                        display: 'flex', justifyContent: 'flex-end',\r\n                        backgroundColor: 'transparent'\r\n                    }}>\r\n                        <Popover\r\n                            // initialFocusRef={initialFocusRef}\r\n                            returnFocusOnClose={false}\r\n                            placement=\"bottom\"\r\n                            isOpen={this.state.display_new_message_popover}\r\n                            onClose={() => { this.close() }}\r\n                            closeOnBlur={false}\r\n                        >\r\n                            {/**nb: removing the lines of code between this comment messes up the popover */}\r\n                            <PopoverTrigger>\r\n                                <CUIButton style={{ visibility: 'hidden' }}>Trigger</CUIButton>\r\n                            </PopoverTrigger>\r\n                            {/**nb: removing the lines of code between this comment messes up the popover */}\r\n\r\n                            <PopoverContent color=\"white\" bg=\"blue.800\" borderColor=\"blue.800\"\r\n                                marginRight=\"5\"\r\n                            >\r\n                                <PopoverHeader pt={4} fontWeight=\"bold\" border=\"0\">\r\n                                    Manage Your Channels\r\n                                        </PopoverHeader>\r\n                                <PopoverArrow />\r\n                                <PopoverCloseButton />\r\n                                <PopoverBody>\r\n                                    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do\r\n                                    eiusmod tempor incididunt ut labore et dolore.\r\n                                         </PopoverBody>\r\n                                <PopoverFooter\r\n                                    border=\"0\"\r\n                                    d=\"flex\"\r\n                                    alignItems=\"center\"\r\n                                    justifyContent=\"space-between\"\r\n                                    pb={4}\r\n                                >\r\n                                    <Box fontSize=\"sm\">Step 2 of 4</Box>\r\n                                    <ButtonGroup size=\"sm\">\r\n                                        <CUIButton colorScheme=\"green\">Setup Email</CUIButton>\r\n                                        <CUIButton colorScheme=\"blue\"\r\n                                        // ref={initialFocusRef}\r\n                                        >\r\n                                            Next\r\n                                                 </CUIButton>\r\n                                    </ButtonGroup>\r\n                                </PopoverFooter>\r\n                            </PopoverContent>\r\n                        </Popover>\r\n                    </div>\r\n\r\n                </Container>\r\n\r\n            </ChakraProvider >\r\n        )\r\n    }\r\n\r\n    new_message_popover() {\r\n        // alert('create new message')\r\n        this.open()\r\n    }\r\n\r\n    close_new_message_popover() {\r\n        this.setState({ display_new_message_popover: false })\r\n    }\r\n\r\n}\r\nexport default Forum;\r\n","C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\pages\\Staff_Dashboard\\Dashboard_menu_items\\Schedule\\Schedule.js",["169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189"],"import React, { Component } from 'react';\r\nimport '../Schedule/Schedule.css'\r\nimport '../Schedule/react-scheduler.css'\r\n\r\nimport {\r\n    ScheduleComponent, Inject, Week,\r\n    WorkWeek, Month, Agenda, Day, EventSettingsModel,\r\n    ViewDirective, ViewsDirective, EventRenderedArgs, ActionEventArgs\r\n} from '@syncfusion/ej2-react-schedule';\r\nimport { DataManager, WebApiAdaptor } from '@syncfusion/ej2-data';\r\nimport { L10n } from '@syncfusion/ej2-base'\r\n\r\n/**chakra ui imports */\r\nimport {\r\n    ChakraProvider,\r\n    AlertDialog, AlertDialogBody,\r\n    AlertDialogFooter, AlertDialogHeader, AlertDialogContent,\r\n    AlertDialogOverlay, Button as CUIButton, Spinner, Modal as CUIModal,\r\n    ModalOverlay, ModalContent, ModalHeader,\r\n    ModalFooter, ModalBody, ModalCloseButton,\r\n} from \"@chakra-ui/react\"\r\n\r\n/**material ui imports */\r\nimport {\r\n    Button as MUIButton, Typography,\r\n    TextField, Backdrop, CircularProgress,\r\n} from '@material-ui/core';\r\nimport {\r\n    VisibilityOutlined, VisibilityOffOutlined,\r\n    PersonOutlineOutlined, Error, Close, CalendarToday,\r\n    Place, Assignment\r\n} from '@material-ui/icons';\r\n\r\n/**react bootstrap imports */\r\nimport {\r\n    Button as RBButton, Container, Row, Col,\r\n    Card, Modal,\r\n    CardDeck,\r\n} from 'react-bootstrap';\r\n\r\nimport { AsyncStorage } from 'AsyncStorage'\r\nimport modulevariables from '../../../Modulevariables';\r\n\r\n/**customized editor window\r\n * changing the button texts\r\n * the editor window header text is hidden in the scheduler.css file\r\n */\r\nL10n.load({\r\n    'en-US': {\r\n        'schedule': {\r\n            'saveButton': 'Save',\r\n            'cancelButton': 'Cancel',\r\n            'newEvent': 'Create Appointment',\r\n            'editEvent': 'Edit Appointment'\r\n        }\r\n    }\r\n})\r\n\r\n\r\nconst server = modulevariables.applicationserver\r\n\r\nclass Schedule extends Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props)\r\n\r\n        /**creating a new instance of the scheduler component allowing us to access the data in the scheduler\r\n         * and the default methods that come with the scheduler component*/\r\n        this.scheduleObj = ScheduleComponent;\r\n\r\n        this.state = {\r\n\r\n            /**this table collects the staff's events fetched from the db */\r\n            staff_events_table: [],\r\n\r\n            scheduler_event_raw_data: [],/**this stores the args records when an event is created, updated or deleted */\r\n\r\n            display_confirm_new_appointment_dialog_box: false,\r\n            display_update_appointment_details_dialog_box: false,\r\n\r\n            display_backdrop: false,\r\n\r\n            display_modal: false,\r\n            modal_title: '',\r\n            modal_content: '',\r\n\r\n            display_modal2: false,\r\n\r\n            scheduler_events_refreshing: true,/**we display a loader page in place of the calender when we're refreshing the calendar events data */\r\n\r\n\r\n            present_event_quickinfo_popup: false,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        /**fetch the staff's id which we'd used to fetch his details\r\n         *  whenever we refresh the page(benefit of the async storage) \r\n         * since the async fetch is asynchronous we wait for it to finish before we finally use the \r\n         * id to fetch the staff's schedule events*/\r\n        this._asyncStore_fetch_staff_id()\r\n            .then(response => {\r\n                console.log('staff id has been fetched!')\r\n                this.fetch_staff_schedule_events()\r\n            })\r\n    }\r\n\r\n    /**anything in here triggers before each of the event\r\n     * getting rendered on the scheduler user interface */\r\n    onEventRendered(args) {\r\n        // alert(\"It will triggered before each of the event getting rendered on the scheduler user interface.\");\r\n    }\r\n\r\n\r\n    /**anything in here triggers on beginning of every scheduler action */\r\n    onActionBegin(args) {\r\n\r\n        /**when an event is created */\r\n        if (args.requestType === \"eventCreate\") {\r\n            // alert(\"This will be triggered after a new event is rendered on the scheduler page\");\r\n            // console.log('Added event: ', args.addedRecords)  /**retrieves the fields data of the newly created event */\r\n\r\n            this.setState({ scheduler_event_raw_data: args.addedRecords }, () => {\r\n                this.show_confirmation_dialog_box_new_appointment()\r\n            })\r\n\r\n            /**built-in methods by the scheduler component */\r\n            // console.log('All events in the schedule :', this.scheduleObj.getEvents());  //Retrieves the entire collection of events bound to the Schedule.\r\n            // console.log('All events in the current view :', this.scheduleObj.getCurrentViewEvents())   //Retrieves the events that lies on the current date range of the active view of Schedule.\r\n            // console.log('Last id of event in the schedule :', this.scheduleObj.getEventMaxID())   //Get the maximum id of an event.\r\n            // this.scheduleObj.refreshEvents() //Refreshes the event dataSource. This method may be useful when the events alone in the schedule needs to be re-rendered.\r\n        }\r\n\r\n        /**when an event is changed or edited */\r\n        if (args.requestType === \"eventChange\") {\r\n            // alert(\"This will be triggered after an event has been edited or updated.\");\r\n            // console.log('Updated event: ', args.changedRecords)    /**retrieves the fields data of the updated event */  \r\n\r\n            this.setState({ scheduler_event_raw_data: args.changedRecords }, () => {\r\n                this.show_update_appointment_dialog_box()\r\n            })\r\n\r\n        }\r\n\r\n        /**when an event is removed */\r\n        if (args.requestType === \"eventRemove\") {\r\n            // alert(\"This will triggered after an event has been deleted\");\r\n            // console.log('Deleted event: ', args.deletedRecords)    /**retrieves the fields data of the deleted event */\r\n\r\n            this.show_backdrop()\r\n            this.delete_event(args.deletedRecords)\r\n        }\r\n    }\r\n\r\n\r\n    /**everything in here triggers on successful completion of the scheduler action */\r\n    onActionComplete(args) {\r\n        if (args.requestType === \"dateNavigate\") {\r\n            // alert(\"This will triggered after click the next/prev button\");\r\n            // console.log(this.scheduleObj.getCurrentViewDates())  //Retrieves the dates that lies on active view of Schedule.\r\n\r\n            /**retrieving the events after moving on to the next view page */\r\n            // let currentViewDates: Date[] = this.scheduleObj.getCurrentViewDates() as Date[];\r\n            // let startDate: Date = currentViewDates[4];\r\n            // let endDate: Date = currentViewDates[7];\r\n            // let filteredEvents: Object[] = this.scheduleObj.getEvents(startDate, endDate, true);\r\n        }\r\n    }\r\n\r\n\r\n    onCellDoubleClick() {\r\n        // this.appendElement('SChedule <b>Cell Double Click</b> event called<hr>');\r\n        // alert('cell double clicked!')\r\n    }\r\n\r\n    /**prevent user from opening the mini \"create event\" window since we\r\n     * want them to provide*/\r\n    onCellClick(args) {\r\n        // this.appendElement('Schedule <b>Cell Click</b> event called<hr>');\r\n        // alert('cell clicked!')\r\n        args.cancel = true;\r\n\r\n        // this.setState({ present_event_quickinfo_popup: false })\r\n    }\r\n\r\n    onEventClick(args) {\r\n        // this.appendElement('Schedule <b>Event Click</b> event called<hr>');\r\n        // alert('event clicked!')\r\n        // args.Cancel = true;\r\n        // if (args.type === 'Editor' || args.type === 'QuickInfo') {\r\n        //     alert('edit event window has opened')\r\n        // }\r\n\r\n        this.setState({ present_event_quickinfo_popup: true })\r\n    }\r\n\r\n    onPopupOpen(args) {\r\n\r\n        // if (args.type === 'Editor') {\r\n        //     alert('editor window opened')\r\n        // }\r\n\r\n        // if (args.type === 'EventContainer') {\r\n        //    alert('EventContainer window opened')\r\n        // }\r\n\r\n        // if (args.type === 'QuickInfo') {\r\n        //     // alert('QuickInfo window opened')\r\n        //     // this.setState({ present_event_quickinfo_popup: false })\r\n        // }\r\n\r\n        // open the editor window in single click\r\n        // if (args.type === 'QuickInfo') {\r\n        //     var dialogObj = args.element.ej2_instances[0];\r\n        //     dialogObj.hide();\r\n        //     var currentAction = args.target.classList.contains('e-work-cells') ? 'Add' : 'Save';\r\n        //     this.scheduleObj.openEditor(args.data, currentAction);\r\n        // }\r\n\r\n        // if (args.type === 'RecurrenceAlert') {\r\n        //     alert('RecurrenceAlert window opened')\r\n        // }\r\n\r\n        // if (args.type === 'DeleteAlert') {\r\n        //     alert('DeleteAlert window opened')\r\n        // }\r\n\r\n        // if (args.type === 'ViewEventInfo') {\r\n        //     alert('ViewEventInfo window opened')\r\n        // }\r\n\r\n        if (args.type === 'EditEventInfo') {\r\n            alert('EditEventInfo window opened')\r\n            this.setState({ present_event_quickinfo_popup: true })\r\n\r\n        }\r\n\r\n        // if (args.type === 'ValidationAlert') {\r\n        //     alert('ValidationAlert window opened')\r\n        // }\r\n\r\n        // if (args.type === 'RecurrenceValidationAlert') {\r\n        //     alert('RecurrenceValidationAlert window opened')\r\n        // }\r\n    }\r\n\r\n    onPopupClose(args) {\r\n        // alert('pop up closed')\r\n        // this.setState({ present_event_quickinfo_popup: false })\r\n    }\r\n\r\n\r\n    onBeforeOpen(args) {\r\n        // if (args.model.title == \"Edit Repeat Appointment\")\r\n        //     args.cancel = true;\r\n    }\r\n\r\n\r\n    /**quick info popup design content */\r\n    content(props) {\r\n\r\n        if (this.state.present_event_quickinfo_popup === true) {\r\n            // console.log('props: ', props)\r\n\r\n            /**substr('number of characters to remove from the front' , 'character to end at after removing the characters in front') */\r\n            // console.log(props.StartTime.toString().substr(4, 17))\r\n\r\n            return (\r\n                <div style={{ background: 'reds', display: 'block', width: '100%', margin: 0, color: 'gray' }}>\r\n\r\n                    {/**date and time row */}\r\n                    <div style={{ width: '100%', background: 'greens', display: 'flex', paddingTop: 5, paddingBottom: 5 }}>\r\n\r\n                        {/**calendar icon */}\r\n                        <div style={{ width: '10%', background: 'yellows', display: 'flex', alignItems: 'center', }}>\r\n                            {(props.StartTime !== null) ?\r\n                                <CalendarToday fontSize='small' style={{ color: 'gray' }} />\r\n                                :\r\n                                <div style={{ margin: 0, padding: 0 }}>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n\r\n                        {/* date and time */}\r\n                        <div style={{ width: '90%', background: 'grays', paddingTop: 2 }}>\r\n                            {(props.StartTime !== undefined) ?\r\n                                <Typography style={{ fontSize: 12 }}>\r\n                                    {(props.IsAllDay === false) ?\r\n                                        <span>{props.StartTime.toString().substr(4, 17)} - {props.EndTime.toString().substr(16, 5)}</span>\r\n                                        :\r\n                                        <span>{props.StartTime.toString().substr(4, 11)} (All day)</span>\r\n                                    }\r\n                                </Typography>\r\n                                :\r\n                                <div style={{ margin: 0, padding: 0 }}></div>\r\n                            }\r\n                        </div>\r\n\r\n                    </div>\r\n\r\n                    {/* location row */}\r\n                    <div style={{ width: '100%', background: 'greens', display: 'flex', paddingTop: 5, paddingBottom: 5 }}>\r\n\r\n                        {/* location icon */}\r\n                        <div style={{ width: '10%', background: 'yellows', display: 'flex', alignItems: 'center', }}>\r\n                            {(props.Location !== null) ?\r\n                                <Place fontSize='small' style={{ color: 'gray' }} />\r\n                                :\r\n                                <div style={{ margin: 0, padding: 0 }}></div>\r\n                            }\r\n                        </div>\r\n\r\n                        {/* location */}\r\n                        <div style={{ width: '90%', background: 'grays', paddingTop: 2 }}>\r\n                            {(props.Location !== undefined) ?\r\n                                <Typography style={{ fontSize: 12 }}>\r\n                                    <span> {props.Location}</span>\r\n                                </Typography>\r\n                                :\r\n                                <div style={{ margin: 0, padding: 0 }}>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* description row */}\r\n                    <div style={{ width: '100%', background: 'pinks', display: 'flex', paddingTop: 5, paddingBottom: 10 }}>\r\n\r\n                        {/* description icon */}\r\n                        <div style={{ width: '10%', background: 'oranges', display: 'flex', alignItems: 'center' }}>\r\n                            {(props.Description !== null) ?\r\n                                <Assignment fontSize='small' style={{ color: 'gray' }} />\r\n                                :\r\n                                <div style={{ margin: 0, padding: 0 }}>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n\r\n                        {/* description  */}\r\n                        <div style={{ width: '90%', background: 'dodgerblues', paddingTop: 2 }}>\r\n                            {(props.Description !== undefined) ?\r\n                                <Typography style={{ fontSize: 12 }}>\r\n                                    <span>{props.Description}</span>\r\n                                </Typography>\r\n                                :\r\n                                <div style={{ margin: 0, padding: 0 }}>\r\n                                </div>\r\n                            }\r\n                        </div>\r\n                    </div>\r\n\r\n                    {/* book appointment button */}\r\n                    <div style={{ display: 'flex', justifyContent: 'center', width: '100%' }}>\r\n                        <CUIButton\r\n                            isFullWidth={true}\r\n                            onClick={() => {\r\n                                alert('booked students!')\r\n                            }}\r\n                            isLoading={false}\r\n                            loadingText=\"Logging in\"\r\n                            variant=\"solid\"\r\n                            size=\"sm\"\r\n                            style={{ background: '#3560B8', color: 'white' }}\r\n                        >\r\n                            View booked students\r\n                </CUIButton>\r\n                    </div>\r\n\r\n                </div>\r\n\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        /**this is only rendered when we're refreshing the calendar page */\r\n        if (this.state.scheduler_events_refreshing === true) {\r\n            return (\r\n                <div className=\"events_refreshing_backdrop\" >\r\n                    <Spinner thickness=\"4px\" speed=\"0.65s\" emptyColor=\"gray.200\" color=\"blue.500\" size=\"xl\" />\r\n                    <Typography style={{ color: 'white', paddingLeft: 20 }}>Loading appointments ...</Typography>\r\n\r\n                    {/**special modal for error fetching appointments by staff */}\r\n                    <CUIModal\r\n                        isOpen={this.state.display_modal2}\r\n                        onClose={() => { this.close_modal2() }}\r\n                        isCentered\r\n                    >\r\n                        <ModalOverlay />\r\n                        <ModalContent>\r\n                            <ModalHeader>Error!</ModalHeader>\r\n                            <ModalCloseButton />\r\n                            <ModalBody>\r\n                                Error loading appointments. Please check your internet connection and then refresh the page\r\n                                </ModalBody>\r\n\r\n                            <ModalFooter>\r\n                                <CUIButton colorScheme=\"blue\" mr={3}\r\n                                    onClick={() => { this.close_modal2() }}\r\n                                >\r\n                                    Close\r\n                                    </CUIButton>\r\n                            </ModalFooter>\r\n                        </ModalContent>\r\n                    </CUIModal>\r\n                </div>\r\n            )\r\n        }\r\n\r\n\r\n        else {\r\n            return (\r\n\r\n                <ChakraProvider>\r\n\r\n                    <div>\r\n\r\n                        {/* backdrop */}\r\n                        {\r\n                            this.state.display_backdrop ?\r\n                                <div style={{\r\n                                    width: '100%', height: '100%', position: 'fixed',\r\n                                    zIndex: 100, left: 0, top: 0, background: 'rgb(0,0,0,0.5)',\r\n                                    display: 'flex', justifyContent: 'center', alignItems: 'center',\r\n                                    opacity: 0.5\r\n                                }}>\r\n                                    <Spinner thickness=\"4px\" speed=\"0.65s\" emptyColor=\"gray.200\" color=\"blue.500\" size=\"xl\" />\r\n                                    <Typography style={{ color: 'white', paddingLeft: 20 }}>please wait ...</Typography>\r\n                                </div>\r\n                                :\r\n                                null\r\n                        }\r\n\r\n                        {/**modal design */}\r\n                        <CUIModal\r\n                            isOpen={this.state.display_modal}\r\n                            onClose={() => { this.close_modal() }}\r\n                            isCentered\r\n                        >\r\n                            <ModalOverlay />\r\n                            <ModalContent>\r\n                                <ModalHeader> {this.state.modal_title}</ModalHeader>\r\n                                <ModalCloseButton />\r\n                                <ModalBody>\r\n                                    {this.state.modal_content}\r\n                                </ModalBody>\r\n\r\n                                <ModalFooter>\r\n                                    <CUIButton colorScheme=\"blue\" mr={3} onClick={() => { this.close_modal() }}>Close</CUIButton>\r\n                                </ModalFooter>\r\n                            </ModalContent>\r\n                        </CUIModal>\r\n\r\n                        {/**schedule component wrapper */}\r\n                        <ScheduleComponent\r\n                            currentView=\"Month\" /**default view to be displayed in the scheduler */\r\n                            width='100%' height='100vh' rowAutoHeight={true}\r\n                            eventSettings={{\r\n                                dataSource: this.state.staff_events_table,    /**fetch added events or schedules into the current view*/\r\n                            }}\r\n                            eventRendered={this.onEventRendered.bind(this)}\r\n                            actionBegin={this.onActionBegin.bind(this)}\r\n                            actionComplete={this.onActionComplete.bind(this)}\r\n                            ref={schedule => this.scheduleObj = schedule}   /**we assign a reference to the new instance we created so that we can access the data and methods of the scheduler component */\r\n\r\n                            cellClick={this.onCellClick.bind(this)}\r\n                            cellDoubleClick={this.onCellDoubleClick.bind(this)}\r\n                            eventClick={this.onEventClick.bind(this)}\r\n                            popupOpen={this.onPopupOpen.bind(this)}\r\n                            popupClose={this.onPopupClose.bind(this)}\r\n                            onBeforeOpen={this.onBeforeOpen.bind(this)}\r\n\r\n                            quickInfoTemplates={this.state.present_event_quickinfo_popup ? {\r\n                                // header: this.header.bind(this),\r\n                                content: this.content.bind(this),\r\n                                // footer: this.footer.bind(this)\r\n                            } : {}}\r\n\r\n\r\n\r\n                        >\r\n\r\n                            {/**views we want to display in the top right corner of schedule page\r\n                     * delete all these to display default views */}\r\n                            <ViewsDirective>\r\n                                <ViewDirective\r\n                                    option='Month'\r\n                                    showWeekNumber={false}\r\n                                    showWeekend={true}  /**add sat and sun to month view */\r\n                                ></ViewDirective>\r\n                            </ViewsDirective>\r\n\r\n                            <Inject services={[Day, Week, WorkWeek, Month, Agenda]} />\r\n                        </ScheduleComponent>\r\n\r\n\r\n                        {/* create new appointment confirmation dialog box */}\r\n                        <AlertDialog\r\n                            isOpen={this.state.display_confirm_new_appointment_dialog_box}\r\n                            isCentered\r\n                        >\r\n                            <AlertDialogOverlay>\r\n                                <AlertDialogContent>\r\n                                    <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                                        Confirm New Appointment\r\n                                 </AlertDialogHeader>\r\n\r\n                                    <AlertDialogBody>\r\n                                        This will be made visible to students to allow them to book an appointment\r\n                                </AlertDialogBody>\r\n\r\n                                    <AlertDialogFooter>\r\n                                        <CUIButton colorScheme=\"green\"\r\n                                            onClick={() => {\r\n                                                this.show_backdrop()\r\n                                                this.hide_confirmation_dialog_box_new_appointment()\r\n                                                this.save_event(this.state.scheduler_event_raw_data)\r\n                                            }}\r\n                                            ml={3}>\r\n                                            Confirm\r\n                                    </CUIButton>\r\n                                        <CUIButton colorScheme=\"red\"\r\n                                            style={{ marginLeft: 10 }}\r\n                                            onClick={() => {\r\n                                                this.hide_confirmation_dialog_box_new_appointment()\r\n                                                this.cancel_dialog_box()\r\n                                            }}\r\n                                        >\r\n                                            Cancel\r\n                                    </CUIButton>\r\n                                    </AlertDialogFooter>\r\n                                </AlertDialogContent>\r\n                            </AlertDialogOverlay>\r\n                        </AlertDialog>\r\n\r\n                        {/* update appointment details dialog box */}\r\n                        <AlertDialog\r\n                            isOpen={this.state.display_update_appointment_details_dialog_box}\r\n                            isCentered\r\n                        >\r\n                            <AlertDialogOverlay>\r\n                                <AlertDialogContent>\r\n                                    <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                                        Update appointment\r\n                                 </AlertDialogHeader>\r\n\r\n                                    <AlertDialogBody>\r\n                                        Do you want to update the appointment details?\r\n                                </AlertDialogBody>\r\n\r\n                                    <AlertDialogFooter>\r\n                                        <CUIButton colorScheme=\"green\"\r\n                                            onClick={() => {\r\n                                                this.show_backdrop()\r\n                                                this.hide_update_appointment_details_dialog_box()\r\n                                                this.update_event(this.state.scheduler_event_raw_data)\r\n                                            }}\r\n                                            ml={3}>\r\n                                            Yes\r\n                                    </CUIButton>\r\n                                        <CUIButton colorScheme=\"red\"\r\n                                            style={{ marginLeft: 10 }}\r\n                                            onClick={() => {\r\n                                                this.hide_update_appointment_details_dialog_box()\r\n                                                this.cancel_dialog_box()\r\n                                            }}\r\n                                        >\r\n                                            No\r\n                                    </CUIButton>\r\n                                    </AlertDialogFooter>\r\n                                </AlertDialogContent>\r\n                            </AlertDialogOverlay>\r\n                        </AlertDialog>\r\n\r\n                    </div>\r\n\r\n                </ChakraProvider >\r\n            )\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    _asyncStore_fetch_staff_id = async () => {\r\n        try {\r\n            modulevariables.global_staff_id = await AsyncStorage.getItem('stored_staff_id');\r\n            console.log('staff id: ', modulevariables.global_staff_id)\r\n        } catch (error) {\r\n            // Error fetching data\r\n            console.log(\"async storage error: \", error)\r\n        }\r\n    }\r\n\r\n    /**save created event into db */\r\n    save_event(event_details) {\r\n        console.log('event details to be saved are :', event_details)\r\n\r\n        if (event_details[0].Description === undefined) {\r\n            event_details[0].Description = 'null'\r\n        }\r\n        if (event_details[0].IsAllDay === true) {\r\n            event_details[0].IsAllDay = 'true'\r\n        } else {\r\n            event_details[0].IsAllDay = 'false'\r\n        }\r\n\r\n        // if (event_details[0].EndTime === undefined) {\r\n        //     event_details[0].EndTime = ''\r\n        // }\r\n        if (event_details[0].EndTimezone === null) {\r\n            event_details[0].EndTimezone = 'null'\r\n        }\r\n\r\n        if (!event_details[0].EndTimezone) {\r\n            event_details[0].EndTimezone = 'null'\r\n        }\r\n\r\n        if (event_details[0].FollowingID === undefined) {\r\n            event_details[0].FollowingID = 'null'\r\n        }\r\n        if (event_details[0].Guid === undefined) {\r\n            event_details[0].Guid = 'null'\r\n        }\r\n        if (event_details[0].Location === undefined) {\r\n            event_details[0].Location = 'null'\r\n        }\r\n        if (event_details[0].RecurrenceException === undefined) {\r\n            event_details[0].RecurrenceException = 'null'\r\n        }\r\n        if (event_details[0].RecurrenceID === undefined) {\r\n            event_details[0].RecurrenceID = 'null'\r\n        }\r\n        if (event_details[0].RecurrenceRule === null) {\r\n            event_details[0].RecurrenceRule = 'null'\r\n        }\r\n\r\n        if (!event_details[0].RecurrenceRule) {\r\n            event_details[0].RecurrenceRule = 'null'\r\n        }\r\n\r\n        // if (event_details[0].StartTime === undefined) {\r\n        //     event_details[0].StartTime = ''\r\n        // }\r\n        if (event_details[0].StartTimezone === null) {\r\n            event_details[0].StartTimezone = 'null'\r\n        }\r\n\r\n        if (!event_details[0].StartTimezone) {\r\n            event_details[0].StartTimezone = 'null'\r\n        }\r\n\r\n\r\n        // if (event_details[0].Subject === 'Add title') {\r\n        //     event_details[0].Subject = 'Add title'\r\n        // }\r\n\r\n        fetch(server + 'staff_save_event.php', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'text/plain',\r\n                'Content-Type': 'text/plain'\r\n            },\r\n            body: JSON.stringify({\r\n                staff_idDB: modulevariables.global_staff_id,    /**we have to add the id of the staff who's creating the event */\r\n                event_idDB: event_details[0].Id,\r\n                event_subjectDB: event_details[0].Subject,\r\n                event_descriptionDB: event_details[0].Description,\r\n                event_locationDB: event_details[0].Location,\r\n                event_start_timeDB: event_details[0].StartTime,\r\n                event_start_time_zoneDB: event_details[0].StartTimezone,\r\n                event_end_timeDB: event_details[0].EndTime,\r\n                event_end_time_zoneDB: event_details[0].EndTimezone,\r\n                event_all_day_statusDB: event_details[0].IsAllDay,\r\n                event_recurrence_idDB: event_details[0].RecurrenceID,\r\n                event_recurrence_ruleDB: event_details[0].RecurrenceRule,\r\n                event_recurrence_exceptionDB: event_details[0].RecurrenceException,\r\n                event_guidDB: event_details[0].Guid,\r\n                event_following_idDB: event_details[0].FollowingID\r\n            })\r\n        }).then((response) => response.text())\r\n            .then((responseJson) => {\r\n                // console.log(responseJson)\r\n\r\n                var jsconvertedrows = JSON.parse(responseJson)\r\n                var finaldata = JSON.stringify(jsconvertedrows)\r\n\r\n                /**if event was successfully saved in the db */\r\n                if (finaldata === '\"event successfully saved!\"') {\r\n                    console.log('event has been saved in the db')\r\n\r\n                    /**close confirmation box */\r\n                    this.hide_confirmation_dialog_box_new_appointment()\r\n\r\n                    /**close backdrop */\r\n                    this.hide_backdrop()\r\n\r\n                    /**refresh the schedule events data */\r\n                    this.fetch_staff_schedule_events()\r\n                }\r\n\r\n                /**if event couldnt be saved in the db */\r\n                else {\r\n                    console.log('event couldnt be saved. Query failed!')\r\n\r\n                    /**close confirmation box */\r\n                    this.hide_confirmation_dialog_box_new_appointment()\r\n\r\n                    /**close backdrop */\r\n                    this.hide_backdrop()\r\n\r\n                    this.show_modal('Error!', 'Could not create new appointment. Please try again')\r\n\r\n                }\r\n            }, err => {\r\n\r\n                /**connection to server error */\r\n                console.log('internet error: ', err)\r\n\r\n                /**close confirmation box */\r\n                this.hide_confirmation_dialog_box_new_appointment()\r\n\r\n                /**hide backdrop */\r\n                this.hide_backdrop()\r\n\r\n                this.show_modal('Error!', 'Could not create new appointment. Check your internet connection')\r\n\r\n            })\r\n    }\r\n\r\n    /**delete selected event from the db */\r\n    delete_event(event_details) {\r\n        console.log('event details to be deleted are: ', event_details)\r\n\r\n        /**deleting event from db */\r\n        fetch(server + 'delete_staff_event.php', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'text/plain',\r\n                'Content-Type': 'text/plain'\r\n            },\r\n            body: JSON.stringify({\r\n                event_idDB: event_details[0].Id,\r\n                staff_idDB: modulevariables.global_staff_id  /**we add this because two different staff can \r\n                create separate events and they'd have the same event id\r\n                so by deleting we specify the staff's id too to know which staff's event we're deleting */\r\n            })\r\n        }).then((response) => response.text())\r\n            .then((responseJson) => {\r\n\r\n                // console.log(responseJson)\r\n\r\n                var jsconvertedrows = JSON.parse(responseJson)\r\n                var finaldata = JSON.stringify(jsconvertedrows)\r\n\r\n                /**if event was successfully deleted from the db */\r\n                if (finaldata === '\"event successully deleted!\"') {\r\n                    console.log('event has been deleted from db')\r\n\r\n                    /**close backdrop */\r\n                    this.hide_backdrop()\r\n\r\n                    /**refresh the schedule events data */\r\n                    this.fetch_staff_schedule_events()\r\n                }\r\n\r\n                /**if event couldnt be deleted from the db */\r\n                else {\r\n                    console.log('event couldnt be deleted. Query failed!')\r\n\r\n                    /**close backdrop */\r\n                    this.hide_backdrop()\r\n\r\n                    this.show_modal('Error!', 'Could not delete appointment. Please try again')\r\n                }\r\n\r\n            }, err => {\r\n                /**connection to server error */\r\n                console.log('internet error: ', err)\r\n\r\n                /**hide backdrop */\r\n                this.hide_backdrop()\r\n\r\n                this.show_modal('Error!', 'Could not delete appointment. Check your internet connection')\r\n            })\r\n    }\r\n\r\n    /**update selected event in the db */\r\n    update_event(event_details) {\r\n        console.log('event details to be updated are: ', event_details)\r\n\r\n        event_details[0].RecurrenceException = 'null'\r\n        event_details[0].RecurrenceID = 'null'\r\n        event_details[0].FollowingID = 'null'\r\n\r\n        if ((event_details[0].RecurrenceException === null)) {\r\n            event_details[0].RecurrenceException = 'null'\r\n        }\r\n\r\n        if ((event_details[0].RecurrenceID === null)) {\r\n            event_details[0].RecurrenceID = 'null'\r\n        }\r\n\r\n        if ((event_details[0].FollowingID === null)) {\r\n            event_details[0].FollowingID = 'null'\r\n        }\r\n\r\n        if (event_details[0].RecurrenceRule === null) {\r\n            event_details[0].RecurrenceRule = 'null'\r\n        }\r\n        if (event_details[0].Description === undefined) {\r\n            event_details[0].Description = 'null'\r\n        }\r\n        if (event_details[0].IsAllDay === true) {\r\n            event_details[0].IsAllDay = 'true'\r\n        } else {\r\n            event_details[0].IsAllDay = 'false'\r\n        }\r\n        // if (event_details[0].EndTime === undefined) {\r\n        //     event_details[0].EndTime = ''\r\n        // }\r\n        if (event_details[0].EndTimezone === null) {\r\n            event_details[0].EndTimezone = 'null'\r\n        }\r\n        if (event_details[0].Guid === undefined) {\r\n            event_details[0].Guid = 'null'\r\n        }\r\n        if (event_details[0].Location === undefined) {\r\n            event_details[0].Location = 'null'\r\n        }\r\n        // if (event_details[0].StartTime === undefined) {\r\n        //     event_details[0].StartTime = ''\r\n        // }\r\n        if (event_details[0].StartTimezone === null) {\r\n            event_details[0].StartTimezone = 'null'\r\n        }\r\n        // if (event_details[0].Subject === 'Add title') {\r\n        //     event_details[0].Subject = 'Add title'\r\n        // }\r\n\r\n        // setTimeout(() => {\r\n        //     console.log('event details to be updated are: ', event_details)\r\n        // }, 5000);\r\n\r\n\r\n        fetch(server + 'update_staff_event.php', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'text/plain',\r\n                'Content-Type': 'text/plain'\r\n            },\r\n            body: JSON.stringify({\r\n                staff_idDB: modulevariables.global_staff_id,    /**we have to add the id of the staff who's updating the event because two diff\r\n                staff can create separate events with the same event id so we use the staff id to differentiate between them*/\r\n                event_idDB: event_details[0].Id,\r\n                event_subjectDB: event_details[0].Subject,\r\n                event_descriptionDB: event_details[0].Description,\r\n                event_locationDB: event_details[0].Location,\r\n                event_start_timeDB: event_details[0].StartTime,\r\n                event_start_time_zoneDB: event_details[0].StartTimezone,\r\n                event_end_timeDB: event_details[0].EndTime,\r\n                event_end_time_zoneDB: event_details[0].EndTimezone,\r\n                event_all_day_statusDB: event_details[0].IsAllDay,\r\n                event_recurrence_idDB: event_details[0].RecurrenceID,\r\n                event_recurrence_ruleDB: event_details[0].RecurrenceRule,\r\n                event_recurrence_exceptionDB: event_details[0].RecurrenceException,\r\n                event_guidDB: event_details[0].Guid,\r\n                event_following_idDB: event_details[0].FollowingID\r\n            })\r\n        }).then((response) => response.text())\r\n            .then((responseJson) => {\r\n\r\n                // console.log(responseJson)\r\n\r\n                var jsconvertedrows = JSON.parse(responseJson)\r\n                var finaldata = JSON.stringify(jsconvertedrows)\r\n\r\n                /**if event was successfully updated in the db */\r\n                if (finaldata === '\"event successfully updated!\"') {\r\n                    console.log('event has been updated in the db')\r\n\r\n                    /**close confirmation box */\r\n                    this.hide_update_appointment_details_dialog_box()\r\n\r\n                    /**close backdrop */\r\n                    this.hide_backdrop()\r\n\r\n                    /**refresh the schedule events data */\r\n                    this.fetch_staff_schedule_events()\r\n                }\r\n\r\n                /**if event couldnt be updated in the db */\r\n                else {\r\n                    console.log('event couldnt be updated. Query failed!')\r\n\r\n                    /**close confirmation box */\r\n                    this.hide_update_appointment_details_dialog_box()\r\n\r\n                    /**close backdrop */\r\n                    this.hide_backdrop()\r\n\r\n                    this.show_modal('Error', 'Could not update appointment. Please try again')\r\n                }\r\n\r\n            }, err => {\r\n                /**connection to server error */\r\n                console.log('internet error: ', err)\r\n\r\n                /**close confirmation box */\r\n                this.hide_update_appointment_details_dialog_box()\r\n\r\n                /**hide backdrop */\r\n                this.hide_backdrop()\r\n\r\n                this.show_modal('Error!', 'Could not update appointment. Check your internet connection')\r\n            })\r\n    }\r\n\r\n    /**fetch staff's events */\r\n    fetch_staff_schedule_events() {\r\n\r\n        this.setState({ scheduler_events_refreshing: true })\r\n\r\n        this.setState({ staff_events_table: [] })\r\n\r\n        fetch(server + 'view_staff_schedule.php', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'text/plain',\r\n                'Content-Type': 'text/plain'\r\n            },\r\n            body: JSON.stringify({\r\n                staff_idDB: modulevariables.global_staff_id\r\n            })\r\n        }).then((response) => response.text())\r\n            .then((responseJson) => {\r\n\r\n                // console.log(responseJson)\r\n\r\n                var jsconvertedrows = JSON.parse(responseJson)\r\n                var finaldata = JSON.stringify(jsconvertedrows)\r\n\r\n                /**if there are no events created by the staff */\r\n                if (finaldata === '\"no search results\"') {\r\n                    console.log('no event has been created by staff')\r\n\r\n                    this.setState({ scheduler_events_refreshing: false })\r\n                }\r\n\r\n                /**if the events were fetched from the db*/\r\n                else {\r\n\r\n                    /**for each property we're going to change the value in a way that would\r\n                     * be recognized by the scheduler when fetched into it\r\n                     */\r\n                    for (var count = 0; count < jsconvertedrows.length; count++) {\r\n\r\n                        if (jsconvertedrows[count].EndTimezone === 'null') {\r\n                            jsconvertedrows[count].EndTimezone = null;\r\n                        }\r\n                        if (jsconvertedrows[count].Description === 'null') {\r\n                            jsconvertedrows[count].Description = null;\r\n                        }\r\n                        if (jsconvertedrows[count].FollowingID === 'null') {\r\n                            jsconvertedrows[count].FollowingID = null;\r\n                        }\r\n                        if (jsconvertedrows[count].Guid === 'null') {\r\n                            jsconvertedrows[count].Guid = null;\r\n                        }\r\n                        if (jsconvertedrows[count].Location === 'null') {\r\n                            jsconvertedrows[count].Location = null;\r\n                        }\r\n                        if (jsconvertedrows[count].RecurrenceException === 'null') {\r\n                            jsconvertedrows[count].RecurrenceException = null;\r\n                        }\r\n                        if (jsconvertedrows[count].RecurrenceID === 'null') {\r\n                            jsconvertedrows[count].RecurrenceID = null;\r\n                        }\r\n                        if (jsconvertedrows[count].RecurrenceRule === 'null') {\r\n                            jsconvertedrows[count].RecurrenceRule = null;\r\n                        }\r\n                        if (jsconvertedrows[count].StartTimezone === 'null') {\r\n                            jsconvertedrows[count].StartTimezone = null;\r\n                        }\r\n\r\n                        if (jsconvertedrows[count].IsAllDay === 'true') {\r\n                            jsconvertedrows[count].IsAllDay = true;\r\n                        } else {\r\n                            if (jsconvertedrows[count].IsAllDay === 'false') {\r\n                                jsconvertedrows[count].IsAllDay = false;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    /**adding new property to our object array */\r\n                    // jsconvertedrows.map(element => {\r\n                    //     element.category = \"1,2,6\"\r\n                    // })\r\n\r\n                    /**we can finally save the valid data required by the scheduler into the\r\n                     * staff events table */\r\n                    this.setState({ staff_events_table: [] }, () => {\r\n                        this.setState({ staff_events_table: jsconvertedrows }, () => {\r\n                            // console.log('staff events data: ', this.state.staff_events_table)\r\n                            this.setState({ scheduler_events_refreshing: false })\r\n                        })\r\n                    })\r\n\r\n                }\r\n\r\n            }, err => {\r\n                /**connection to server error */\r\n                console.log('internet error: ', err)\r\n\r\n                this.setState({ display_modal2: true })\r\n            })\r\n    }\r\n\r\n    show_backdrop() {\r\n        this.setState({ display_backdrop: true })\r\n    }\r\n\r\n    hide_backdrop() {\r\n        this.setState({ display_backdrop: false })\r\n    }\r\n\r\n    show_confirmation_dialog_box_new_appointment() {\r\n        this.setState({ display_confirm_new_appointment_dialog_box: true })\r\n    }\r\n\r\n    show_update_appointment_dialog_box() {\r\n        this.setState({ display_update_appointment_details_dialog_box: true })\r\n    }\r\n\r\n    hide_confirmation_dialog_box_new_appointment() {\r\n        this.setState({ display_confirm_new_appointment_dialog_box: false })\r\n    }\r\n\r\n    hide_update_appointment_details_dialog_box() {\r\n        this.setState({ display_update_appointment_details_dialog_box: false })\r\n    }\r\n\r\n    show_modal(title, content) {\r\n        this.setState({ modal_title: title }, () => {\r\n            this.setState({ modal_content: content }, () => {\r\n                this.setState({ display_modal: true })\r\n            })\r\n        })\r\n    }\r\n\r\n    close_modal() {\r\n        this.setState({ display_modal: false }, () => {\r\n            this.fetch_staff_schedule_events()/**refresh the schedule events data */\r\n        })\r\n    }\r\n\r\n    close_modal2() {\r\n        this.setState({ display_modal2: false }, () => {\r\n            this.setState({ scheduler_events_refreshing: false })\r\n        })\r\n    }\r\n\r\n    cancel_dialog_box() {\r\n        this.fetch_staff_schedule_events();\r\n    }\r\n\r\n}\r\nexport default Schedule;","C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\pages\\Student_Dashboard\\Dashboard_menu_items\\Booking\\Booking.js",["190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220"],"import React, { Component } from 'react';\r\nimport '../Booking/Booking.css'\r\nimport '../Booking/scheduler.css'\r\n\r\nimport {\r\n    ScheduleComponent, Inject, Week,\r\n    WorkWeek, Month, Agenda, Day, EventSettingsModel,\r\n    ViewDirective, ViewsDirective, EventRenderedArgs, ActionEventArgs\r\n} from '@syncfusion/ej2-react-schedule';\r\nimport { DropDownListComponent } from '@syncfusion/ej2-react-dropdowns'\r\nimport { DateTimePickerComponent } from '@syncfusion/ej2-react-calendars'\r\nimport { L10n } from '@syncfusion/ej2-base';\r\n\r\n/**material ui imports */\r\nimport {\r\n    TextField, Typography,\r\n    List, ListItem, ListItemAvatar, Avatar,\r\n    ListItemText, ListItemSecondaryAction, IconButton\r\n} from '@material-ui/core';\r\n\r\nimport {\r\n    VisibilityOutlined, VisibilityOffOutlined,\r\n    PersonOutlineOutlined, Error, Close, CalendarToday,\r\n    Place, Assignment, Check, Delete, Info\r\n} from '@material-ui/icons';\r\n\r\n/**react bootstrap imports */\r\nimport { Button as RBButton, Container, Row, Col, Dropdown, DropdownButton } from 'react-bootstrap';\r\n\r\n/**chakra ui imports */\r\nimport {\r\n    useToast,    /**toast 1 */\r\n    ChakraProvider, AlertDialog, AlertDialogBody,\r\n    AlertDialogFooter, AlertDialogHeader, AlertDialogContent,\r\n    AlertDialogOverlay, Button as CUIButton, Spinner, Modal as CUIModal,\r\n    ModalOverlay, ModalContent, ModalHeader,\r\n    ModalFooter, ModalBody, ModalCloseButton,\r\n    ButtonGroup, Stack, SimpleGrid, Box, Grid, GridItem, VStack,\r\n    List as CUIList, ListItem as CUIListItem, Collapse\r\n} from \"@chakra-ui/react\"\r\nimport { MdBuild, MdCall } from \"react-icons/md\"\r\nimport { FaFacebook, FaTwitter } from \"react-icons/fa\"\r\n\r\nimport { AsyncStorage } from 'AsyncStorage'\r\nimport modulevariables from '../../../Modulevariables';\r\n\r\nconst server = modulevariables.applicationserver\r\n\r\n/**customized editor window\r\n * changing the button texts\r\n * the editor window header text is hidden in the scheduler.css file\r\n */\r\nL10n.load({\r\n    'en-US': {\r\n        'schedule': {\r\n            // 'saveButton': 'Confirm',\r\n            // 'cancelButton': 'Close',\r\n            // 'newEvent': 'Book Appointment',\r\n            // 'editEvent': 'Book Appointment'\r\n        }\r\n    }\r\n})\r\n\r\nclass Booking extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        /**creating a new instance of the scheduler component allowing us to access the data in the scheduler\r\n         * and the default methods that come with the scheduler component*/\r\n        this.scheduleObj = ScheduleComponent;\r\n\r\n        this.state = {\r\n\r\n            dropdown_text: 'Select Counsellor',\r\n\r\n            available_staff_table: [],\r\n\r\n            selected_staff_events_table: [],\r\n\r\n            display_booking_confirmation_dialog_box: false,\r\n            display_unbooking_confirmation_dialog_box: false,\r\n\r\n            display_backdrop: false,\r\n\r\n            event_details_to_be_booked: [], /**this will store the event details of the event the student has decided to book so that we pass the data in it into our function that books the student in the db */\r\n            event_details_to_be_unbooked: [], /**this will store the event details of the event the studnet has decided to unbook so that we pass the data in it into our function that unbooks the student in the db */\r\n\r\n            selected_staff_id: null, /**this will store the id of the staff who has been selected from the dropdown menu */\r\n\r\n            display_modal: false,\r\n            modal_title: '',\r\n            modal_content: '',\r\n\r\n            display_student_appointments_modal: false,\r\n\r\n            my_appointment_list_item_collapse_info: false,/**this shows or collapses a list item for its more info in the my appoinments modal */\r\n\r\n            student_appointments_table: [],/**appointments booked by the student */\r\n            student_appointments_data_ready: false, /**we use this to render a loader whiles fetching the student's appoinments booked */\r\n            student_has_zero_appointments: false, /**we use this to render a message indicating a student has no appointment if there is none in the db */\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        /**fetch the students's id which we'd used to fetch his details\r\n               *  whenever we refresh the page(benefit of the async storage) \r\n               * since the async fetch is asynchronous we wait for it to finish before we finally \r\n               * fetch the available staff's names from which he'd select one to load his schedule appointments\r\n               * and choose which date to book*/\r\n        this._asyncStore_fetch_student_id()\r\n            .then(response => {\r\n                console.log('student id has been fetched!')\r\n                this.fetch_available_staff()\r\n            })\r\n    }\r\n\r\n    /**when user selects an available booking slot event our customized window editor will\r\n     * show up allowing them to provide their details and then finally book the slot\r\n     */\r\n    editorWindowTemplate() {\r\n        return (\r\n            <VStack\r\n                spacing={5}\r\n                align=\"stretch\"\r\n            // style={{ marginLeft: 20, marginRight: 20 }}\r\n            >\r\n                <TextField id=\"standard-basic\" label=\"Full name\" />\r\n\r\n                <TextField id=\"standard-basic\" label=\"Programme\" />\r\n\r\n                <TextField id=\"standard-basic\" label=\"Year\" />\r\n            </VStack>\r\n        )\r\n    }\r\n\r\n    /**disable the popup window when an event is clicked*/\r\n    onPopupOpen(args) {\r\n        // args.cancel = true;\r\n    }\r\n\r\n    onActionBegin(args) {\r\n\r\n        /**if student wants to create a new event then we prevent it\r\n         * the student is only allowed to open the available booking slots and book an appointment \r\n         */\r\n        if (args.requestType === 'eventCreate') {\r\n            args.cancel = true;\r\n            alert('Access Denied')\r\n        }\r\n\r\n        /**a student is not allowed or permitted to remove a booking event created by the staff */\r\n        if (args.requestType === 'eventRemove') {\r\n            args.cancel = true\r\n            alert('Acess Denied!')\r\n        }\r\n\r\n        /**if the student opens an available appointmnet slot and proceeds to book an appointment\r\n         * the following is triggered\r\n         */\r\n        if (args.requestType === 'eventChange') {\r\n            alert('Appointment has been booked')\r\n        }\r\n    }\r\n\r\n    onEventClick(args) {\r\n        // this.appendElement('Schedule <b>Event Click</b> event called<hr>');\r\n        // alert('event clicked!')\r\n        // args.cancel = true;\r\n        // if (args.type === 'PopupType.Editor' || args.type === 'PopupType.QuickInfo') {\r\n        //     // args.Cancel = true;\r\n        //     console.log('what??')\r\n        // }\r\n        // alert('Book slot?')\r\n\r\n\r\n        // this.scheduleObj.closeEditor(); \r\n    }\r\n\r\n    onCellDoubleClick(args) {\r\n        // this.appendElement('SChedule <b>Cell Double Click</b> event called<hr>');\r\n        // alert('cell double clicked!')\r\n        args.cancel = true\r\n    }\r\n\r\n    /**prevent user from opening the mini \"create event\" window since we\r\n     * want them to provide*/\r\n    onCellClick(args) {\r\n        // this.appendElement('Schedule <b>Cell Click</b> event called<hr>');\r\n        // alert('cell clicked!')\r\n        args.cancel = true;\r\n    }\r\n\r\n    onQuickInfoClose = () => {\r\n        this.scheduleObj.quickPopup.quickPopupClose();\r\n    };\r\n\r\n    /**only appears on the quick info that shows when trying to create a new event */\r\n    footer() {\r\n        return (\r\n            <div>\r\n                this is the footer section\r\n            </div>\r\n        )\r\n    }\r\n\r\n    /**quick info popup design header */\r\n    header(props) {\r\n        return (\r\n            <div\r\n                style={{\r\n                    width: '100%', display: 'block',\r\n                    background: '#3560B8', color: 'white',\r\n                }}>\r\n\r\n                {/**close icon */}\r\n                <div\r\n                    style={{\r\n                        width: '100%', display: 'flex', background: 'reds',\r\n                        justifyContent: 'flex-end', paddingRight: 10, paddingTop: 5\r\n                    }}>\r\n                    <Close fontSize='small' style={{ color: 'white' }} onClick={this.onQuickInfoClose.bind(this)} />\r\n                </div>\r\n\r\n                {/**event subject */}\r\n                <div\r\n                    style={{\r\n                        width: '100%', display: 'flex', background: 'greens',\r\n                        justifyContent: 'flex-start',\r\n                        paddingLeft: 25, paddingBottom: 10\r\n                    }}>\r\n                    {(props.Subject !== undefined) ?\r\n                        <Typography style={{ fontWeight: 'bold', fontSize: 15 }}>\r\n                            <span>{props.Subject}</span>\r\n                        </Typography>\r\n                        :\r\n                        \"\"\r\n                    }\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    /**quick info popup design content */\r\n    content(props) {\r\n\r\n        // console.log('props: ', props)\r\n\r\n        /**substr('number of characters to remove from the front' , 'character to end at after removing the characters in front') */\r\n        // console.log(props.StartTime.toString().substr(4, 17))\r\n\r\n        return (\r\n            <div style={{ background: 'reds', display: 'block', width: '100%', margin: 0, color: 'gray' }}>\r\n\r\n                {/**date and time row */}\r\n                <div style={{ width: '100%', background: 'greens', display: 'flex', paddingTop: 5, paddingBottom: 5 }}>\r\n\r\n                    {/**calendar icon */}\r\n                    <div style={{ width: '10%', background: 'yellows', display: 'flex', alignItems: 'center', }}>\r\n                        {(props.StartTime !== null) ?\r\n                            <CalendarToday fontSize='small' style={{ color: 'gray' }} />\r\n                            :\r\n                            <div style={{ margin: 0, padding: 0 }}>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n\r\n                    {/* date and time */}\r\n                    <div style={{ width: '90%', background: 'grays', paddingTop: 2 }}>\r\n                        {(props.StartTime !== undefined) ?\r\n                            <Typography style={{ fontSize: 12 }}>\r\n                                {(props.IsAllDay === false) ?\r\n                                    <span>{props.StartTime.toString().substr(4, 17)} - {props.EndTime.toString().substr(16, 5)}</span>\r\n                                    :\r\n                                    <span>{props.StartTime.toString().substr(4, 11)} (All day)</span>\r\n                                }\r\n                            </Typography>\r\n                            :\r\n                            <div style={{ margin: 0, padding: 0 }}></div>\r\n                        }\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                {/* location row */}\r\n                <div style={{ width: '100%', background: 'greens', display: 'flex', paddingTop: 5, paddingBottom: 5 }}>\r\n\r\n                    {/* location icon */}\r\n                    <div style={{ width: '10%', background: 'yellows', display: 'flex', alignItems: 'center', }}>\r\n                        {(props.Location !== null) ?\r\n                            <Place fontSize='small' style={{ color: 'gray' }} />\r\n                            :\r\n                            <div style={{ margin: 0, padding: 0 }}></div>\r\n                        }\r\n                    </div>\r\n\r\n                    {/* location */}\r\n                    <div style={{ width: '90%', background: 'grays', paddingTop: 2 }}>\r\n                        {(props.Location !== undefined) ?\r\n                            <Typography style={{ fontSize: 12 }}>\r\n                                <span> {props.Location}</span>\r\n                            </Typography>\r\n                            :\r\n                            <div style={{ margin: 0, padding: 0 }}>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                {/* description row */}\r\n                <div style={{ width: '100%', background: 'pinks', display: 'flex', paddingTop: 5, paddingBottom: 10 }}>\r\n\r\n                    {/* description icon */}\r\n                    <div style={{ width: '10%', background: 'oranges', display: 'flex', alignItems: 'center' }}>\r\n                        {(props.Description !== null) ?\r\n                            <Assignment fontSize='small' style={{ color: 'gray' }} />\r\n                            :\r\n                            <div style={{ margin: 0, padding: 0 }}>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n\r\n                    {/* description  */}\r\n                    <div style={{ width: '90%', background: 'dodgerblues', paddingTop: 2 }}>\r\n                        {(props.Description !== undefined) ?\r\n                            <Typography style={{ fontSize: 12 }}>\r\n                                <span>{props.Description}</span>\r\n                            </Typography>\r\n                            :\r\n                            <div style={{ margin: 0, padding: 0 }}>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n\r\n                {/* book appointment button */}\r\n                <div style={{ display: 'flex', justifyContent: 'center', width: '100%' }}>\r\n                    <CUIButton\r\n                        isFullWidth={true}\r\n                        onClick={() => { this.show_booking_confirmation_dialog_box(props) }}\r\n                        isLoading={false}\r\n                        loadingText=\"Logging in\"\r\n                        variant=\"solid\"\r\n                        size=\"sm\"\r\n                        style={{ background: '#3560B8', color: 'white' }}\r\n                    >\r\n                        Book Appointment\r\n                </CUIButton>\r\n                </div>\r\n\r\n            </div>\r\n\r\n        )\r\n    }\r\n\r\n    render() {\r\n\r\n        /**toast 2 */\r\n        const { toast } = this.props;\r\n\r\n        return (\r\n\r\n            <ChakraProvider>\r\n\r\n                <div className=\"page-setup\">\r\n\r\n                    {/* backdrop */}\r\n                    {\r\n                        this.state.display_backdrop ?\r\n                            <div style={{\r\n                                width: '100%', height: '100%',\r\n                                position: 'fixed',\r\n                                left: 0, top: 0,\r\n                                zIndex: 100,\r\n                                background: 'rgb(0,0,0,0.5)',\r\n                                display: 'flex', justifyContent: 'center', alignItems: 'center',\r\n                                opacity: 0.5\r\n                            }}>\r\n                                <Spinner thickness=\"4px\" speed=\"0.65s\" emptyColor=\"gray.200\" color=\"blue.500\" size=\"xl\" />\r\n                                <Typography style={{ color: 'white', paddingLeft: 20 }}>please wait ...</Typography>\r\n                            </div>\r\n                            :\r\n                            null\r\n                    }\r\n\r\n                    {/**modal design */}\r\n                    <CUIModal\r\n                        isOpen={this.state.display_modal}\r\n                        onClose={() => { this.close_modal() }}\r\n                        isCentered\r\n                    >\r\n                        <ModalOverlay />\r\n                        <ModalContent>\r\n                            <ModalHeader> {this.state.modal_title}</ModalHeader>\r\n                            <ModalCloseButton />\r\n                            <ModalBody>\r\n                                {this.state.modal_content}\r\n                            </ModalBody>\r\n\r\n                            <ModalFooter>\r\n                                <CUIButton colorScheme=\"blue\" mr={3} onClick={() => { this.close_modal() }}>Close</CUIButton>\r\n                            </ModalFooter>\r\n                        </ModalContent>\r\n                    </CUIModal>\r\n\r\n\r\n                    {/* student appointments modal */}\r\n                    <CUIModal\r\n                        isOpen={this.state.display_student_appointments_modal}\r\n                        onClose={() => { this.setState({ display_student_appointments_modal: false }) }}\r\n                        isCentered\r\n                    // size=\"sm\"\r\n                    >\r\n                        <ModalOverlay />\r\n                        <ModalContent\r\n                            style={{\r\n                                height: '75vh'\r\n                            }}\r\n                        >\r\n                            <ModalHeader\r\n                                style={{\r\n                                    // textAlign: 'center',\r\n                                    paddingLeft: 40\r\n                                }}\r\n                            >\r\n                                My appointments</ModalHeader>\r\n                            <ModalCloseButton />\r\n                            <ModalBody style={{ overflowY: 'scroll' }}>\r\n\r\n                                {\r\n\r\n                                    //finished fetching from the db\r\n                                    this.state.student_appointments_data_ready ?\r\n                                        <div>\r\n                                            {\r\n\r\n                                                //if the student had no appointment in the db\r\n                                                this.state.student_has_zero_appointments ?\r\n                                                    <div style={{\r\n                                                        height: 300, display: 'flex',\r\n                                                        flexDirection: 'column',\r\n                                                        justifyContent: 'center',\r\n                                                        alignItems: 'center',\r\n                                                        // background: 'red',\r\n                                                        paddingLeft: 50, paddingRight: 50\r\n                                                    }}>\r\n                                                        <Typography style={{ color: 'black', alignSelf: 'flex-start' }}>\r\n                                                            You have no appointments.\r\n                                                        </Typography>\r\n\r\n                                                        <Typography style={{ color: 'black', paddingTop: 30 }}>\r\n                                                            Select a counsellor from the drop\r\n                                                            down menu to book an appointment.\r\n                                                        </Typography>\r\n                                                    </div>\r\n                                                    :\r\n\r\n                                                    //if the student had appointmnents in the db\r\n                                                    <List>\r\n                                                        {/**list item */}\r\n\r\n                                                        {\r\n                                                            this.state.student_appointments_table.map((countB) => {\r\n                                                                return (\r\n                                                                    <ListItem key={countB.booked_event_row_id} >\r\n                                                                        {/**event subject and counsellor name */}\r\n                                                                        <ListItemText\r\n                                                                            primary={countB.event_subject}\r\n                                                                            secondary={\r\n                                                                                <CUIList spacing={2}>\r\n                                                                                    <CUIListItem >\r\n                                                                                        <span style={{ fontWeight: 'bold' }}>by: </span>{countB.staff_full_name}\r\n                                                                                    </CUIListItem>\r\n\r\n                                                                                    {/* <Collapse in={countB.collapse}> */}\r\n                                                                                    <CUIListItem>\r\n                                                                                        <span style={{ fontWeight: 'bold' }}>Date: </span>{countB.event_date_and_time}\r\n                                                                                    </CUIListItem>\r\n                                                                                    <CUIListItem style={{ paddingTop: 5 }}>\r\n                                                                                        <span style={{ fontWeight: 'bold' }}>Loaction: </span>{countB.event_location}\r\n                                                                                    </CUIListItem>\r\n                                                                                    <CUIListItem style={{ paddingTop: 5 }}>\r\n                                                                                        <span style={{ fontWeight: 'bold' }}>Description: </span>{countB.event_description}\r\n                                                                                    </CUIListItem>\r\n                                                                                    {/* </Collapse> */}\r\n                                                                                </CUIList>\r\n                                                                            }\r\n                                                                        />\r\n                                                                        {/**right end buttons */}\r\n                                                                        <ListItemSecondaryAction>\r\n\r\n                                                                            {/**more info button */}\r\n                                                                            {/* <IconButton edge=\"end\" aria-label=\"delete\"\r\n                                                                                onClick={() => { this.collapse_or_uncollapse_list_item(countB) }}\r\n                                                                            >\r\n                                                                                <Info fontSize='small' />\r\n                                                                            </IconButton> */}\r\n\r\n                                                                            {/**unbook icon */}\r\n                                                                            <IconButton edge=\"end\" aria-label=\"delete\" onClick={() => { this.show_unbooking_confirmation_dialog_box(countB) }}>\r\n                                                                                <Delete fontSize='small' />\r\n                                                                            </IconButton>\r\n                                                                        </ListItemSecondaryAction>\r\n                                                                    </ListItem>\r\n                                                                )\r\n                                                            })\r\n                                                        }\r\n\r\n\r\n                                                    </List>\r\n                                            }\r\n                                        </div>\r\n\r\n\r\n                                        :\r\n\r\n                                        // loading spinner...\r\n                                        <div style={{ height: 300, display: 'flex', justifyContent: 'center', alignItems: 'center' }}>\r\n                                            <Spinner thickness=\"4px\" speed=\"0.65s\" emptyColor=\"gray.200\" color=\"blue.500\" size=\"xl\" />\r\n                                            <Typography style={{ color: 'black', paddingLeft: 20 }}>loading appointments ...</Typography>\r\n                                        </div>\r\n                                }\r\n\r\n\r\n                            </ModalBody>\r\n\r\n                        </ModalContent>\r\n                    </CUIModal>\r\n\r\n\r\n                    {/**counsellor selection row */}\r\n                    <div className=\"counsellor-section-row\">\r\n\r\n                        {/* select counsellor dropdown menu  */}\r\n                        <DropdownButton\r\n                            id=\"dropdown-basic-button\"\r\n                            title={this.state.dropdown_text}\r\n                            style={{\r\n                                paddingLeft: 10\r\n                            }}\r\n                            size=\"sm\"\r\n                        >\r\n                            {\r\n                                this.state.available_staff_table.map((countA) => {\r\n                                    return (\r\n                                        <Dropdown.Item\r\n                                            key={countA.staff_id}\r\n                                            onClick={() => { this.change_staff(countA) }}\r\n                                        >\r\n                                            {countA.staff_full_name}\r\n                                        </Dropdown.Item>\r\n                                    )\r\n                                })\r\n                            }\r\n\r\n                        </DropdownButton>\r\n\r\n                        {/* my appointmnents button */}\r\n                        <RBButton\r\n                            variant=\"primary\"\r\n                            size=\"sm\"\r\n                            onClick={() => {\r\n                                this.view_student_appointments()\r\n                            }}\r\n                            style={{\r\n                                marginLeft: 20\r\n                            }}\r\n                        >\r\n                            My appointments\r\n                        </RBButton>\r\n\r\n                    </div>\r\n\r\n                    {/**scheduler row */}\r\n                    <div className=\"scheduler-component-row\">\r\n\r\n                        <ScheduleComponent\r\n                            currentView=\"Month\" /**Month/Week/WorkWeek/Day */\r\n                            width='100%' height='100%' rowAutoHeight={true}\r\n                            eventSettings={{ dataSource: this.state.selected_staff_events_table }} /**fetch added events or schedules into the current view*/\r\n                            editorTemplate={this.editorWindowTemplate.bind(this)}\r\n                            ref={schedule => this.scheduleObj = schedule}   /**we assign a reference to the new instance we created so that we can access the data and methods of the scheduler component */\r\n                            actionBegin={this.onActionBegin.bind(this)}\r\n                            eventClick={this.onEventClick.bind(this)}\r\n                            popupOpen={this.onPopupOpen.bind(this)}\r\n                            cellClick={this.onCellClick.bind(this)}\r\n                            cellDoubleClick={this.onCellDoubleClick.bind(this)}\r\n\r\n                            quickInfoTemplates={{\r\n                                // header: this.header.bind(this),\r\n                                content: this.content.bind(this),\r\n                                // footer: this.footer.bind(this)\r\n                            }}\r\n                        >\r\n\r\n                            {/**views we want to display in the top right corner of schedule page\r\n                                    * delete all these to display default views */}\r\n                            <ViewsDirective>\r\n                                <ViewDirective\r\n                                    option='Month'\r\n                                    showWeekNumber={false}\r\n                                    showWeekend={true}  /**add sat and sun to month view */\r\n                                ></ViewDirective>\r\n                            </ViewsDirective>\r\n\r\n                            <Inject services={[Day, Week, WorkWeek, Month, Agenda]} />\r\n                        </ScheduleComponent>\r\n\r\n                    </div>\r\n\r\n\r\n                    {/* booking confirmation dialog box */}\r\n                    <AlertDialog\r\n                        isOpen={this.state.display_booking_confirmation_dialog_box}\r\n                        isCentered\r\n                    >\r\n                        <AlertDialogOverlay>\r\n                            <AlertDialogContent>\r\n                                <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                                    Book appointment\r\n                                 </AlertDialogHeader>\r\n\r\n                                <AlertDialogBody>\r\n                                    Do you want to place a booking for this event?\r\n                                </AlertDialogBody>\r\n\r\n                                <AlertDialogFooter>\r\n                                    <CUIButton colorScheme=\"green\"\r\n                                        onClick={() => {\r\n                                            this.setState({ display_booking_confirmation_dialog_box: false })\r\n                                            this.show_backdrop()\r\n\r\n                                            /**toast 4 \r\n                                             * pass the toast as an arg into the function where it might be called*/\r\n                                            this.book_event(this.state.event_details_to_be_booked, toast)\r\n\r\n                                        }}\r\n                                        ml={3}>\r\n                                        Yes\r\n                                    </CUIButton>\r\n                                    <CUIButton colorScheme=\"red\"\r\n                                        style={{ marginLeft: 10 }}\r\n                                        onClick={() => {\r\n                                            this.setState({ display_booking_confirmation_dialog_box: false })\r\n                                        }}\r\n                                    >\r\n                                        No\r\n                                    </CUIButton>\r\n                                </AlertDialogFooter>\r\n                            </AlertDialogContent>\r\n                        </AlertDialogOverlay>\r\n                    </AlertDialog>\r\n\r\n                    {/**unbooking confirmation box */}\r\n                    <AlertDialog\r\n                        isOpen={this.state.display_unbooking_confirmation_dialog_box}\r\n                        isCentered\r\n                    >\r\n                        <AlertDialogOverlay>\r\n                            <AlertDialogContent>\r\n                                <AlertDialogHeader fontSize=\"lg\" fontWeight=\"bold\">\r\n                                    Unbook appointment\r\n                                 </AlertDialogHeader>\r\n\r\n                                <AlertDialogBody>\r\n                                    Do you want to delete this booked appointment?\r\n                                </AlertDialogBody>\r\n\r\n                                <AlertDialogFooter>\r\n                                    <CUIButton colorScheme=\"green\"\r\n                                        onClick={() => {\r\n                                            this.setState({ display_unbooking_confirmation_dialog_box: false })\r\n\r\n                                            this.setState({ display_student_appointments_modal: false }) /**we hide the modal else\r\n                                            the please wait backdrop loader wouldnt be seen since the \r\n                                            student_appointments_modal also provides its own backdrop  */\r\n\r\n                                            this.show_backdrop()\r\n\r\n                                            /**toast 4 \r\n                                             * pass the toast as an arg into the function where it might be called*/\r\n                                            this.unbook_event(this.state.event_details_to_be_unbooked, toast)\r\n\r\n                                        }}\r\n                                        ml={3}>\r\n                                        Yes\r\n                                    </CUIButton>\r\n                                    <CUIButton colorScheme=\"red\"\r\n                                        style={{ marginLeft: 10 }}\r\n                                        onClick={() => {\r\n                                            this.setState({ display_unbooking_confirmation_dialog_box: false })\r\n                                        }}\r\n                                    >\r\n                                        No\r\n                                    </CUIButton>\r\n                                </AlertDialogFooter>\r\n                            </AlertDialogContent>\r\n                        </AlertDialogOverlay>\r\n                    </AlertDialog>\r\n\r\n\r\n                </div>\r\n\r\n            </ChakraProvider >\r\n\r\n        )\r\n    }\r\n\r\n\r\n    _asyncStore_fetch_student_id = async () => {\r\n        try {\r\n            modulevariables.global_student_id = await AsyncStorage.getItem('stored_student_id');\r\n            console.log('student id: ', modulevariables.global_student_id)\r\n        } catch (error) {\r\n            // Error fetching data\r\n            console.log(\"async storage error: \", error)\r\n        }\r\n    }\r\n\r\n\r\n    /**we fetch the names and ids of the staff or counsellors so that the student can select\r\n     * one to book an appointment from the staff's schedule events */\r\n    fetch_available_staff() {\r\n        fetch(server + 'fetch_available_staff.php', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'text/plain',\r\n                'Content-Type': 'text/plain'\r\n            },\r\n            body: JSON.stringify({\r\n                //we need nothing \r\n            })\r\n        }).then((response) => response.text())\r\n            .then((responseJson) => {\r\n\r\n                // console.log(responseJson)\r\n\r\n                var jsconvertedrows = JSON.parse(responseJson)\r\n                var finaldata = JSON.stringify(jsconvertedrows)\r\n\r\n                /**if there are no staff in the database */\r\n                if (finaldata === '\"no search results\"') {\r\n                    console.log('there are no staff in the database')\r\n                }\r\n\r\n                /**if there are staff in the database */\r\n                else {\r\n                    this.setState({ available_staff_table: [] }, () => {\r\n                        this.setState({ available_staff_table: jsconvertedrows }, () => {\r\n                            console.log('available staff: ', this.state.available_staff_table)\r\n                        })\r\n                    })\r\n                }\r\n\r\n            }, err => {\r\n                /**connection to server error */\r\n                console.log('internet error: ', err)\r\n                this.show_modal('Error!', 'Could not fetch staff counsellors. Check your internet connection')\r\n            })\r\n    }\r\n\r\n    /**when a student selects a staff from the dropdown menu */\r\n    change_staff(staff_details) {\r\n        this.setState({ dropdown_text: staff_details.staff_full_name })\r\n\r\n        // console.log('selected staff details: ', staff_details)\r\n        this.setState({ selected_staff_id: staff_details.staff_id }, () => {\r\n\r\n            /**now we fetch that particular staff's schedule events */\r\n            this.fetch_selected_staff_schedule_events(staff_details)\r\n        })\r\n    }\r\n\r\n    fetch_selected_staff_schedule_events(staff_details) {\r\n        fetch(server + 'view_staff_schedule.php', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'text/plain',\r\n                'Content-Type': 'text/plain'\r\n            },\r\n            body: JSON.stringify({\r\n                staff_idDB: staff_details.staff_id\r\n            })\r\n        }).then((response) => response.text())\r\n            .then((responseJson) => {\r\n\r\n                // console.log(responseJson)\r\n\r\n                var jsconvertedrows = JSON.parse(responseJson)\r\n                var finaldata = JSON.stringify(jsconvertedrows)\r\n\r\n                /**if there are no events created by the staff */\r\n                if (finaldata === '\"no search results\"') {\r\n                    console.log('no event has been created by staff')\r\n\r\n                    /**clear the table of the previous staff memebers' schedule events */\r\n                    this.setState({ selected_staff_events_table: [] })\r\n                }\r\n\r\n                /**if the events were fetched from the db*/\r\n                else {\r\n\r\n                    /**for each property we're going to change the value in a way that would\r\n                     * be recognized by the scheduler when fetched into it\r\n                     */\r\n                    for (var count = 0; count < jsconvertedrows.length; count++) {\r\n\r\n                        if (jsconvertedrows[count].EndTimezone === 'null') {\r\n                            jsconvertedrows[count].EndTimezone = null;\r\n                        }\r\n                        if (jsconvertedrows[count].Description === 'null') {\r\n                            jsconvertedrows[count].Description = null;\r\n                        }\r\n                        if (jsconvertedrows[count].FollowingID === 'null') {\r\n                            jsconvertedrows[count].FollowingID = null;\r\n                        }\r\n                        if (jsconvertedrows[count].Guid === 'null') {\r\n                            jsconvertedrows[count].Guid = null;\r\n                        }\r\n                        if (jsconvertedrows[count].Location === 'null') {\r\n                            jsconvertedrows[count].Location = null;\r\n                        }\r\n                        if (jsconvertedrows[count].RecurrenceException === 'null') {\r\n                            jsconvertedrows[count].RecurrenceException = null;\r\n                        }\r\n                        if (jsconvertedrows[count].RecurrenceID === 'null') {\r\n                            jsconvertedrows[count].RecurrenceID = null;\r\n                        }\r\n                        if (jsconvertedrows[count].RecurrenceRule === 'null') {\r\n                            jsconvertedrows[count].RecurrenceRule = null;\r\n                        }\r\n                        if (jsconvertedrows[count].StartTimezone === 'null') {\r\n                            jsconvertedrows[count].StartTimezone = null;\r\n                        }\r\n\r\n                        if (jsconvertedrows[count].IsAllDay === 'true') {\r\n                            jsconvertedrows[count].IsAllDay = true;\r\n                        } else {\r\n                            if (jsconvertedrows[count].IsAllDay === 'false') {\r\n                                jsconvertedrows[count].IsAllDay = false;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    /**adding new property to our object array */\r\n                    jsconvertedrows.map(element => {\r\n                        element.IsReadonly = true\r\n                    })\r\n\r\n                    /**we can finally save the valid data required by the scheduler into the\r\n                     * staff events table */\r\n                    this.setState({ selected_staff_events_table: jsconvertedrows })\r\n                    console.log('selected staff events table: ', this.state.selected_staff_events_table)\r\n\r\n                }\r\n\r\n            }, err => {\r\n                /**connection to server error */\r\n                console.log('internet error: ', err)\r\n            })\r\n    }\r\n\r\n    show_booking_confirmation_dialog_box(event_details) {\r\n        // console.log('event details to be booked to are: ', event_details)\r\n        // console.log('event to be be booked id: ', event_details.Id)\r\n\r\n        /**save the event details into our temporary table before opening our confirmation box */\r\n        this.setState({ event_details_to_be_booked: event_details }, () => {\r\n            this.setState({ display_booking_confirmation_dialog_box: true })\r\n        })\r\n\r\n    }\r\n\r\n    show_backdrop() {\r\n        this.setState({ display_backdrop: true })\r\n    }\r\n\r\n    hide_backdrop() {\r\n        this.setState({ display_backdrop: false })\r\n    }\r\n\r\n    book_event(event_details, toast) {\r\n\r\n        console.log('database row_id of event to be booked: ', event_details.row_id)\r\n        console.log('student_id: ', modulevariables.global_student_id)\r\n        console.log('staff id of event: ', this.state.selected_staff_id)\r\n        // console.log('event details to be booked into the db: ', event_details)\r\n\r\n        /**before we book the student for the event they have selected\r\n         * we want to avoid duplicates hencewe first check in the db if the student has\r\n         * already booked to the particular event and then\r\n         * display a notification if the student has already booked that event\r\n         * or save the booking details in the db if the student hasnt booked the event*/\r\n\r\n        fetch(server + 'check_if_student_has_already_booked.php', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'text/plain',\r\n                'Content-Type': 'text/plain'\r\n            },\r\n            body: JSON.stringify({\r\n                booked_event_row_idDB: event_details.row_id,\r\n                student_idDB: modulevariables.global_student_id\r\n            })\r\n        }).then((response) => response.text())\r\n            .then((responseJson) => {\r\n\r\n                // console.log(responseJson)\r\n\r\n                var jsonconvertedrows = JSON.parse(responseJson)\r\n                var finaldata = JSON.stringify(jsonconvertedrows)\r\n\r\n                /**if student hasnt booked the event already */\r\n                if (finaldata === '\"no search results\"') {\r\n                    console.log('student hasnt booked the event so event can be booked')\r\n\r\n                    /**booking the student for the event they have selected into the db*/\r\n                    fetch(server + 'book_event.php', {\r\n                        method: 'POST',\r\n                        headers: {\r\n                            'Accept': 'text/plain',\r\n                            'Content-Type': 'text/plain'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            event_row_idDB: event_details.row_id,   /**we used the row id to differentitate events because every new lecturer's first event created has an event id of 1 so we use the row_id instead */\r\n                            student_idDB: modulevariables.global_student_id,\r\n                            staff_idDB: this.state.selected_staff_id\r\n                        })\r\n                    }).then((response) => response.text())\r\n                        .then((responseJson) => {\r\n\r\n                            // console.log(responseJson)\r\n\r\n                            var jsonconvertedrows = JSON.parse(responseJson)\r\n                            var finaldata = JSON.stringify(jsonconvertedrows)\r\n\r\n                            /**if the event was successfully booked in the db */\r\n                            if (finaldata === '\"event successfully booked!\"') {\r\n                                console.log('event has been succesfully booked in the db')\r\n\r\n                                this.hide_backdrop()    /**hide backdrop */\r\n\r\n                                this.show_toast(toast, 'Success!', 'Appointment has been booked')   /**display success toast */\r\n\r\n                            }\r\n\r\n                            else {\r\n                                console.log('event couldnt be booked.Query failed!')\r\n                                this.hide_backdrop()    /**hide backdrop */\r\n                                this.show_modal('Error!', 'Could not place booking for the appointment. Please try again')\r\n                            }\r\n\r\n                        }, err => {\r\n                            /**connection to server error */\r\n                            console.log('internet errror: ', err)\r\n\r\n                            this.hide_backdrop()    /**hide backdrop */\r\n                            this.show_modal('Error!', 'Could not place booking for the appointment. Check your internet connection')\r\n                        })\r\n                }\r\n\r\n                /**if student has already booked for the appointment */\r\n                else {\r\n                    console.log('Student has booked the event already!')\r\n                    this.hide_backdrop()    /**hide backdrop */\r\n                    this.show_modal('Error!', 'You have already booked for this appointment')\r\n                }\r\n\r\n            }, err => {\r\n                /**connection to server error */\r\n                console.log('internet errror: ', err)\r\n\r\n                this.hide_backdrop()    /**hide backdrop */\r\n                this.show_modal('Error!', 'Could not place booking for the appointment. Check your internet connection')\r\n            })\r\n    }\r\n\r\n    unbook_event(event_details, toast) {\r\n\r\n        // console.log('event details to be unbooked: ',event_details)\r\n        // console.log('database row_id of event to be unbooked: ', event_details.booked_event_row_id)\r\n        // console.log('student id :', modulevariables.global_student_id)\r\n\r\n        console.log('db table(booked_appointments) id: ', event_details.id)\r\n\r\n        /**unbooking the student for the event they have selected */\r\n        fetch(server + 'delete_booked_appointment.php', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'text/plain',\r\n                'Content-Type': 'text/plain'\r\n            },\r\n            body: JSON.stringify({\r\n                booked_appointments_db_table_row_idDB: event_details.id\r\n            })\r\n        }).then((response) => response.text())\r\n            .then((responseJson) => {\r\n\r\n                // console.log(responseJson)\r\n\r\n                var jsonconvertedrows = JSON.parse(responseJson)\r\n                var finaldata = JSON.stringify(jsonconvertedrows)\r\n\r\n                /**if the appointment was successfully deleted from the db */\r\n                if (finaldata === '\"appointment successully deleted!\"') {\r\n                    console.log('appointment has been succesffuly deleted from the db')\r\n\r\n                    this.hide_backdrop() /**hide backdrop */\r\n\r\n                    this.show_toast(toast, 'Success', 'Appointment has been deleted')\r\n\r\n                    /**open the student appointment modal again */\r\n                    this.view_student_appointments()\r\n                }\r\n\r\n                else {\r\n                    console.log('appointment could be deleted.Query failed')\r\n                    this.hide_backdrop()\r\n                    this.show_modal('Error!', 'Could not delete the appointment. Please try again')\r\n                }\r\n\r\n            }, err => {\r\n                /**connection to server error */\r\n                console.log('internet errror: ', err)\r\n\r\n                this.hide_backdrop()    /**hide backdrop */\r\n                this.show_modal('Error!', 'Could not place booking for the appointment. Check your internet connection')\r\n            })\r\n    }\r\n\r\n    show_modal(title, content) {\r\n        this.setState({ modal_title: title }, () => {\r\n            this.setState({ modal_content: content }, () => {\r\n                this.setState({ display_modal: true })\r\n            })\r\n        })\r\n    }\r\n\r\n    close_modal() {\r\n        this.setState({ display_modal: false }, () => {\r\n        })\r\n    }\r\n\r\n    /**toast 5 */\r\n    show_toast(toast, title, content) {\r\n        toast({\r\n            duration: 5000, /**use null to make it not disappear */\r\n            isClosable: true,\r\n            position: \"top\",\r\n            render: () => (\r\n\r\n                /**toast shadow */\r\n                <div className=\"shadow-lg rounded\">\r\n                    <Box color='white' style={{ background: '#59DB00', borderRadius: 5 }}>\r\n                        <div style={{ width: '100%', display: 'flex', paddingTop: 5, paddingBottom: 5 }}>\r\n\r\n                            {/**success icon */}\r\n                            <div style={{ width: '10%', background: 'yellows', display: 'flex', justifyContent: 'center', paddingTop: 3 }}>\r\n                                <Check fontSize='small' />\r\n                            </div>\r\n\r\n                            {/**toast message */}\r\n                            <div style={{ width: '80%', display: 'flex', flexDirection: 'column', justifyContent: 'flex-start', paddingLeft: 10 }}>\r\n                                <Typography>{title}</Typography>\r\n                                <Typography style={{ fontSize: 12 }}>{content}</Typography>\r\n                            </div>\r\n\r\n                            {/**close icon */}\r\n                            <div style={{ width: '10%', display: 'flex', justifyContent: 'center' }}>\r\n                                <Close fontSize='small' onClick={() => { toast.closeAll() }} />\r\n                            </div>\r\n                        </div>\r\n                    </Box>\r\n                </div>\r\n            )\r\n        })\r\n    }\r\n\r\n    view_student_appointments() {\r\n        this.setState({ display_student_appointments_modal: true }, () => {\r\n\r\n            this.setState({ student_appointments_data_ready: false })\r\n            this.setState({ student_has_zero_appointments: false })\r\n\r\n            /** we fetch the student's appointments from the db */\r\n            this.setState({ student_appointments_table: [] }, () => {\r\n                fetch(server + 'view_student_appointments.php', {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Accept': 'text/plain',\r\n                        'Content-Type': 'text/plain'\r\n                    },\r\n                    body: JSON.stringify({\r\n                        student_idDB: modulevariables.global_student_id\r\n                    })\r\n                }).then((response) => response.text())\r\n                    .then((responseJson) => {\r\n\r\n                        // console.log(responseJson)\r\n\r\n                        var jsonconvertedrows = JSON.parse(responseJson)\r\n                        var finaldata = JSON.stringify(jsonconvertedrows)\r\n\r\n                        /**if there are no appointments booked by the student in the db */\r\n                        if (finaldata === '\"no search results\"') {\r\n                            console.log('you havent booked any appointments in the database')\r\n\r\n                            this.setState({ student_appointments_data_ready: true })   /**this hides the loader */\r\n\r\n                            /**show our render message to indicate there are no appoinments */\r\n                            this.setState({ student_has_zero_appointments: true })\r\n                        }\r\n\r\n                        /**if student has appointments */\r\n                        else {\r\n\r\n                            console.log('student has appointments')\r\n\r\n                            /**modify jsonconverted rows for view in the modal */\r\n                            //1. we add a 'collapse' property to each row to differentiate which list item to collapse or not when the\r\n                            //list item's more info is clicked\r\n                            jsonconvertedrows.map(element => {\r\n                                element.collapse = false\r\n                            })\r\n\r\n\r\n                            /**2. we change the value for where the location or description was not provided */\r\n                            for (var count = 0; count < jsonconvertedrows.length; count++) {\r\n                                if (jsonconvertedrows[count].event_location === 'null') {\r\n                                    jsonconvertedrows[count].event_location = 'Not specified'\r\n                                }\r\n                                if (jsonconvertedrows[count].event_description === 'null') {\r\n                                    jsonconvertedrows[count].event_description = 'Not specified'\r\n                                }\r\n                            }\r\n\r\n                            /**3. we create a new property that stores the date and time all in one */\r\n                            jsonconvertedrows.map(element => {\r\n                                element.event_date_and_time = ''\r\n                            })\r\n\r\n                            /**4.we find out which events are all day or time specified and format them before\r\n                             * assigning to our event_date_and_time property\r\n                             */\r\n                            for (var count = 0; count < jsonconvertedrows.length; count++) {\r\n\r\n                                /**if the event is all day */\r\n                                if (jsonconvertedrows[count].event_all_day_status === 'true') {\r\n                                    /**substr('number of characters to remove from the front' , 'character to end at after removing the characters in front') */\r\n                                    jsonconvertedrows[count].event_date_and_time = jsonconvertedrows[count].event_start_time.toString().substr(0, 10) + ' (All day)'\r\n                                }\r\n\r\n                                else {\r\n                                    /**if the event is time specified */\r\n                                    /**substr('number of characters to remove from the front' , 'character to end at after removing the characters in front') */\r\n                                    jsonconvertedrows[count].event_date_and_time = jsonconvertedrows[count].event_start_time.toString().substr(0, 10) + ' ' + '(' + jsonconvertedrows[count].event_start_time.toString().substr(11, 5) + ' - ' + jsonconvertedrows[count].event_end_time.toString().substr(11, 5) + ')'\r\n                                }\r\n                            }\r\n\r\n\r\n                            this.setState({ student_appointments_table: jsonconvertedrows }, () => {\r\n                                console.log('student appointments: ', this.state.student_appointments_table)\r\n                                this.setState({ student_appointments_data_ready: true })   /**we can finally hide the loader */\r\n                                this.setState({ student_has_zero_appointments: false })\r\n                            })\r\n                        }\r\n\r\n                    }, err => {\r\n                        /**connection to server error */\r\n                        console.log('internet error: ', err)\r\n                        this.show_modal('Error!', 'Could not fetch appointments. Check your internet connection')\r\n                    })\r\n            })\r\n        })\r\n    }\r\n\r\n\r\n    /**collpase or uncollapse a list item in the 'my appointments' modal */\r\n    collapse_or_uncollapse_list_item(count) {\r\n        // console.log(count)\r\n\r\n        count.collapse = !count.collapse\r\n\r\n        let temp_array = [...this.state.student_appointments_table];\r\n        temp_array[count] = { ...temp_array[count], collapse: !count.collapse }\r\n        this.setState({ temp_array })\r\n    }\r\n\r\n\r\n    show_unbooking_confirmation_dialog_box(appointment_details) {\r\n        // console.log('appointment to be unbooked details: ', appointment_details)\r\n\r\n        /**save the event details into our temporary table before opening our confirmation box */\r\n        this.setState({ event_details_to_be_unbooked: appointment_details }, () => {\r\n            this.setState({ display_unbooking_confirmation_dialog_box: true })\r\n        })\r\n    }\r\n\r\n}\r\n// export default Booking;\r\n\r\nexport default function (props) {\r\n    const toast = useToast();   /**toast 3 */\r\n    return <Booking {...props} toast={toast} />\r\n}",["221","222"],"C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\pages\\Student_Dashboard\\Dashboard_menu_items\\Chatroom\\Chatroom.js",["223"],"import React, { Component } from 'react';\r\n\r\nclass Chatroom extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>Chatroom Page</div>\r\n        )\r\n    }\r\n\r\n}\r\nexport default Chatroom;","C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\pages\\Student_Dashboard\\Dashboard_menu_items\\Messages\\Messages.js",["224","225","226","227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253"],"import React, { Component } from 'react';\r\nimport './Messages.css'\r\n\r\n/**chakra ui imports */\r\nimport {\r\n    ChakraProvider, Button as CUIButton, Spinner,\r\n    ButtonGroup, Stack, SimpleGrid, Box, Grid, GridItem,\r\n    Popover,\r\n    PopoverTrigger,\r\n    PopoverContent,\r\n    PopoverHeader,\r\n    PopoverBody,\r\n    PopoverFooter,\r\n    PopoverArrow,\r\n    PopoverCloseButton, Textarea\r\n\r\n} from \"@chakra-ui/react\"\r\nimport { MdBuild, MdCall, MdCheckCircle, MdSettings } from \"react-icons/md\"\r\nimport { FaFacebook, FaTwitter } from \"react-icons/fa\"\r\n\r\n/**material ui imports */\r\nimport {\r\n    Button as MUIButton, TextField, List, ListItem,\r\n    FormControl, InputLabel, OutlinedInput,\r\n    InputAdornment, IconButton, ListItemIcon, Checkbox, ListItemText,\r\n    ListItemSecondaryAction, Divider, Typography,\r\n} from '@material-ui/core';\r\nimport {\r\n    Visibility, VisibilityOff, Search, Delete,\r\n    Reply, ContactSupportOutlined, Create,\r\n} from '@material-ui/icons'\r\n\r\n/**react bootstrap imports */\r\nimport {\r\n    Button as RBButton, Container, Row, Col,\r\n    Dropdown, DropdownButton, Table\r\n} from 'react-bootstrap';\r\n\r\n/**react-bootstrap table-2 */\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport 'react-bootstrap-table-next/dist/react-bootstrap-table2.min.css';\r\nimport overlayFactory from 'react-bootstrap-table2-overlay';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport filterFactory, { textFilter } from 'react-bootstrap-table2-filter';\r\n\r\n\r\n//table column headers\r\nconst columns = [\r\n\r\n    /********************** ID COLUMN ************************* */\r\n    {\r\n        dataField: 'id',\r\n        text: 'Id',\r\n        headerStyle: (colum, colIndex) => {\r\n            return {\r\n                width: '5%', textAlign: 'center', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis'\r\n            };\r\n        },\r\n        align: 'center',\r\n        hidden: true,\r\n    },\r\n\r\n\r\n    /********************** NAME COLUMN ************************* */\r\n    {\r\n        dataField: 'name',\r\n        text: 'Name',\r\n        headerStyle: (colum, colIndex) => {\r\n            return {\r\n                width: '20%', textAlign: 'center', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis'\r\n            };\r\n        },\r\n        title: (cell_content, row, rowIndex, colIndex) => `${cell_content}`,\r\n        style: (cell, row, rowIndex, colIndex) => {\r\n            return {\r\n                whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis'\r\n            }\r\n        },\r\n    },\r\n\r\n    /********************** MESSAGE COLUMN ************************* */\r\n    {\r\n        dataField: 'message',\r\n        text: 'Message',\r\n        headerStyle: (colum, colIndex) => {\r\n            return {\r\n                width: '55%', textAlign: 'center'\r\n            };\r\n        },\r\n        title: (cell_content, row, rowIndex, colIndex) => `${cell_content}`,\r\n        style: (cell, row, rowIndex, colIndex) => {\r\n            return {\r\n                whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis'\r\n            }\r\n        },\r\n    },\r\n\r\n    /********************** TIME COLUMN ************************* */\r\n    {\r\n        dataField: 'time',\r\n        text: 'Time',\r\n        headerStyle: (colum, colIndex) => {\r\n            return {\r\n                width: '10%', textAlign: 'center', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis'\r\n            };\r\n        },\r\n        align: 'center',\r\n        style: (cell, row, rowIndex, colIndex) => {\r\n            return {\r\n                whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis'\r\n            }\r\n        },\r\n    },\r\n\r\n    /********************** ACTIONS COLUMN ************************* */\r\n    {\r\n        dataField: 'actions',\r\n        text: 'Actions',\r\n        headerStyle: (colum, colIndex) => {\r\n            return {\r\n                width: '10%', textAlign: 'center', whiteSpace: 'nowrap', overflow: 'hidden', textOverflow: 'ellipsis'\r\n            };\r\n        },\r\n        align: 'center',\r\n    },\r\n];\r\n\r\n//data for your table\r\nconst data = [\r\n    {\r\n        id: 1,\r\n        name: 'Samuel Asare Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n\r\n    {\r\n        id: 2,\r\n        name: 'Venom Mobius Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n    {\r\n        id: 3,\r\n        name: 'Samuel Asare Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n\r\n    {\r\n        id: 4,\r\n        name: 'Venom Mobius Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n    {\r\n        id: 5,\r\n        name: 'Samuel Asare Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n\r\n    {\r\n        id: 6,\r\n        name: 'Venom Mobius Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n    {\r\n        id: 7,\r\n        name: 'Samuel Asare Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n\r\n    {\r\n        id: 8,\r\n        name: 'Venom Mobius Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n    {\r\n        id: 9,\r\n        name: 'Samuel Asare Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n\r\n    {\r\n        id: 10,\r\n        name: 'Venom Mobius Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n    {\r\n        id: 11,\r\n        name: 'Samuel Asare Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n\r\n    {\r\n        id: 12,\r\n        name: 'Venom Mobius Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n    {\r\n        id: 13,\r\n        name: 'Samuel Asare Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n\r\n    {\r\n        id: 14,\r\n        name: 'Venom Mobius Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n    {\r\n        id: 15,\r\n        name: 'Samuel Asare Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n\r\n    {\r\n        id: 16,\r\n        name: 'Venom Mobius Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n    {\r\n        id: 17,\r\n        name: 'Samuel Asare Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n\r\n    {\r\n        id: 18,\r\n        name: 'Venom Mobius Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n    {\r\n        id: 19,\r\n        name: 'Samuel Asare Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n\r\n    {\r\n        id: 20,\r\n        name: 'Venom Mobius Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n    {\r\n        id: 21,\r\n        name: 'Samuel Asare Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n\r\n    {\r\n        id: 22,\r\n        name: 'Venom Mobius Botwe',\r\n        message: 'Basic authentication using a password to Git is deprecated and will soon no longer work. Visit https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/ for more information around suggested workarounds and removal dates.',\r\n        time: '8:30',\r\n        actions: <div style={{ display: 'flex', justifyContent: 'space-evenly' }}>\r\n            <div><Reply style={{ color: 'green', cursor: 'pointer' }} /></div>\r\n            <div><Delete style={{ color: 'red', cursor: 'pointer' }} /></div>\r\n        </div>\r\n    },\r\n\r\n];\r\n\r\n/**adding events to a row */\r\nconst rowEvents = {\r\n    onClick: (e, row, rowIndex) => {\r\n        // console.log('event data of row: ', e)\r\n        // console.log('content of row: ', row)\r\n        // console.log('index of row: ', rowIndex)\r\n    }\r\n};\r\n\r\n/**style content in the row */\r\nconst rowStyle = (row, rowIndex) => {\r\n    return { cursor: 'pointer' };\r\n};\r\n\r\n\r\n\r\nclass Messages extends Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            display_new_message_popover: false\r\n        }\r\n    }\r\n\r\n    open() {\r\n        this.setState({ display_new_message_popover: !this.state.display_new_message_popover })\r\n    }\r\n\r\n    close() {\r\n        this.setState({ display_new_message_popover: false })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <ChakraProvider>\r\n\r\n                <Container fluid className=\"wholepage\" style={{ height: '100vh', overflow: 'hidden' }}>\r\n\r\n                    {/**row 1 of container containing the search box */}\r\n                    <Row style={{ background: 'transparent' }}>\r\n                        {/**search box takes half of the screen on desktops and full on mobile */}\r\n                        <Col xl={6}>\r\n                            <FormControl variant=\"outlined\" style={{ width: '100%', paddingTop: 15, paddingBottom: 10 }}>\r\n                                <OutlinedInput\r\n                                    style={{ height: 40 }}\r\n                                    placeholder=\"Search\"\r\n                                    endAdornment={\r\n                                        <InputAdornment position=\"end\">\r\n                                            <IconButton aria-label=\"toggle password visibility\" edge=\"end\">\r\n                                                <Search />\r\n                                            </IconButton>\r\n                                        </InputAdornment>\r\n                                    }\r\n                                />\r\n                            </FormControl>\r\n                        </Col>\r\n                        <Col xl={6}></Col>\r\n                    </Row>\r\n\r\n\r\n                    {/**row 2 of container containing messages using the react-bootstrap-table-2 component*/}\r\n                    <Row>\r\n\r\n                        <Col className=\"somecols\">\r\n\r\n                            <div className=\"dropdown_fab_containers\">\r\n\r\n                                {/**filter messages dropdown menu */}\r\n                                <DropdownButton id=\"dropdown-basic-button\"\r\n                                    title=\"All messages\">\r\n                                    <Dropdown.Item href=\"#\">All</Dropdown.Item>\r\n                                    <Dropdown.Item href=\"#\">Unread</Dropdown.Item>\r\n                                    <Dropdown.Item href=\"#\">Read</Dropdown.Item>\r\n                                </DropdownButton>\r\n\r\n\r\n                                <div\r\n                                    className=\"fabs\"\r\n                                    onClick={() => { this.new_message_popover() }}\r\n                                >\r\n                                    <Create fontSize='small' style={{ color: 'white', cursor: 'pointer' }} />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div>\r\n                                <BootstrapTable\r\n                                    keyField='id'   //This should be the name of a property that is unique for each item in your dataset\r\n                                    data={data}\r\n                                    columns={columns}\r\n                                    // loading={false}\r\n                                    // overlay={overlayFactory({   //react-bootstrap-table will render overlay if only loading is set to true\r\n                                    //     spinner: true,\r\n                                    //     className: \"table_overlays\"\r\n                                    // })}\r\n                                    bootstrap4={true} //true to indicate your bootstrap version is 4. Default version is 3.\r\n                                    noDataIndication={() => { alert('noting in the table') }}   //a callback function which return anything that will be showed in the table when data is empty. ie. data=[]\r\n                                    striped={false}  //for adding zebra-stripes to a table.\r\n                                    bordered={false} //for adding borders to a table and table cells.\r\n                                    hover={true}    //Same as bootstrap .table-hover class for adding mouse hover effect (grey background color) on table rows.\r\n                                    condensed={false}   //for making a table more compact by cutting cell padding in half\r\n                                    classes=\"table_containers\"   //Customize class on table element.\r\n                                    wrapperClasses=\"wrapper_classs\"    //Customize class on the outer element which wrap up the table element.\r\n                                    headerClasses=\"header_classs\"    //Customize class on the header row(tr).\r\n                                    headerWrapperClasses=\"header_wrapper_classs\" //Customize class on thead.\r\n                                    bodyClasses=\"body_classs\"    //Customize class on tbody.\r\n\r\n                                    //remote\r\n                                    // cellEdit\r\n                                    // selectRow\r\n\r\n                                    rowStyle={rowStyle} // Custom the style of table rows\r\n                                    rowClasses=\"row_classs\"   //Custom the style of table rows\r\n                                    rowEvents={rowEvents}   //Custom the events on row\r\n                                    // hiddenRows={hiddenRows}   //this props accept an array of row keys\r\n                                    // defaultSorted={defaultSorted}  //define which column should be sorted by default when the data is rendered\r\n\r\n                                    //pagination\r\n                                    //filter\r\n                                    // onTableChange\r\n                                    // onDataSizeChange\r\n\r\n                                    pagination={paginationFactory({\r\n                                        // page, // Specify the current page. It's necessary when remote is enabled\r\n                                        // sizePerPage, // Specify the size per page. It's necessary when remote is enabled\r\n                                        // totalSize, // Total data size. It's necessary when remote is enabled\r\n\r\n                                        pageStartIndex: 1, // value to be written as the first page on the pagination bar\r\n                                        paginationSize: 3,  // the pagination bar size or number of selections that can be made on the pagination bar\r\n                                        showTotal: false, // display pagination information eg. (showing 1-10 of 500 rows)\r\n                                        sizePerPageList: [\r\n                                            // A numeric array is also available: [5, 10]. the purpose of above example is custom the text\r\n                                            //first value is item to start\r\n                                            //second value is item to end\r\n                                            { text: '1', value: 14 },\r\n                                        ],\r\n\r\n                                        withFirstAndLast: false, // show the first and last page button\r\n                                        firstPageText: 'First', // the text of first page button\r\n                                        firstPageTitle: 'Go to first', // the tooltip of first page button\r\n                                        lastPageText: 'Last', // the text of last page button\r\n                                        lastPageTitle: 'Go to last', // the tooltip of last page button\r\n\r\n                                        alwaysShowAllBtns: true, // always show the next and previous page button\r\n                                        prePageText: 'Prev', // the text of previous page button\r\n                                        prePageTitle: 'Go to previous', // the tooltip of previous page button\r\n                                        nextPageText: 'Next', // the text of next page button\r\n                                        nextPageTitle: 'Go to next', // the toottip of next page button\r\n\r\n                                        hideSizePerPage: true, // hide the size per page dropdown\r\n                                        hidePageListOnlyOnePage: true, // hide pagination bar when only one page, default is false\r\n\r\n                                        onPageChange: (page, sizePerPage) => {\r\n                                            // callback function when page was changing\r\n                                            // alert('changing page')\r\n                                            console.log('size per page: ', sizePerPage);\r\n                                            console.log('page: ', page);\r\n                                        },\r\n\r\n                                        // onSizePerPageChange: (sizePerPage, page) => {\r\n                                        //     // callback function when page size was changing\r\n                                        //     console.log('size per page: ', sizePerPage);\r\n                                        //     console.log('page: ', page);\r\n                                        // },\r\n\r\n                                        // paginationTotalRenderer: (from, to, size) => { ... }  // custom the pagination total\r\n                                    })}\r\n\r\n                                    filter={filterFactory()}\r\n                                />\r\n                            </div>\r\n\r\n\r\n\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {/**popover display */}\r\n                    <div style={{\r\n                        display: 'flex', justifyContent: 'flex-end',\r\n                        backgroundColor: 'transparent'\r\n                    }}>\r\n                        <Popover\r\n                            returnFocusOnClose={false}\r\n                            placement=\"bottom\"\r\n                            isOpen={this.state.display_new_message_popover}\r\n                            onClose={() => { this.close() }}\r\n                            closeOnBlur={false}\r\n                        >\r\n                            {/**nb: removing the lines of code between this comment messes up the popover */}\r\n                            <PopoverTrigger>\r\n                                <CUIButton style={{ visibility: 'hidden' }}>Trigger</CUIButton>\r\n                            </PopoverTrigger>\r\n                            {/**nb: removing the lines of code between this comment messes up the popover */}\r\n\r\n                            <PopoverContent color=\"white\" bg=\"blue.800\" borderColor=\"blue.800\"\r\n                                marginRight=\"5\"\r\n                            >\r\n                                <PopoverHeader pt={4} fontWeight=\"bold\" border=\"0\">\r\n\r\n                                    <div style={{ display: 'flex' }}>\r\n                                        <span style={{ paddingRight: 10, paddingTop: 5 }}>To:</span>\r\n\r\n                                        <DropdownButton size=\"sm\" id=\"dropdown-basic-button\"\r\n                                            title=\"Everyone\">\r\n                                            <Dropdown.Item href=\"#\">Everyone</Dropdown.Item>\r\n                                            <Dropdown.Item href=\"#\">Dr. Peter Mensah</Dropdown.Item>\r\n                                            <Dropdown.Item href=\"#\">Mrs. Jane Doe</Dropdown.Item>\r\n                                        </DropdownButton>\r\n                                    </div>\r\n\r\n                                </PopoverHeader>\r\n\r\n                                <PopoverArrow />\r\n                                <PopoverCloseButton />\r\n                                <PopoverBody>\r\n                                    <Textarea\r\n                                        borderRadius=\"5px\"\r\n                                        placeholder=\"Enter Message ...\"\r\n                                        // value={value}\r\n                                        // onChange={handleInputChange}\r\n                                        size=\"sm\"\r\n                                        isInvalid={false}\r\n                                        variant=\"flushed\"\r\n                                    />\r\n                                </PopoverBody>\r\n                                <PopoverFooter\r\n                                    border=\"0\"\r\n                                    d=\"flex\"\r\n                                    alignItems=\"center\"\r\n                                    justifyContent=\"flex-end\"\r\n                                    pb={4}\r\n                                >\r\n                                    <ButtonGroup size=\"sm\">\r\n                                        <CUIButton colorScheme=\"green\">Send</CUIButton>\r\n                                        <CUIButton colorScheme=\"red\" >Cancel </CUIButton>\r\n                                    </ButtonGroup>\r\n                                </PopoverFooter>\r\n                            </PopoverContent>\r\n                        </Popover>\r\n                    </div>\r\n\r\n                </Container>\r\n\r\n            </ChakraProvider >\r\n        )\r\n    }\r\n\r\n    new_message_popover() {\r\n        // alert('create new message')\r\n        this.open()\r\n    }\r\n\r\n    close_new_message_popover() {\r\n        this.setState({ display_new_message_popover: false })\r\n    }\r\n\r\n}\r\nexport default Messages;\r\n","C:\\projects\\react js\\kstu-ecounseling\\kstu-ecounseling\\src\\pages\\Modulevariables.js",[],{"ruleId":"254","replacedBy":"255"},{"ruleId":"256","replacedBy":"257"},{"ruleId":"258","severity":1,"message":"259","line":7,"column":18,"nodeType":"260","messageId":"261","endLine":7,"endColumn":23},{"ruleId":"262","severity":1,"message":"263","line":22,"column":5,"nodeType":"264","messageId":"265","endLine":25,"endColumn":6},{"ruleId":"258","severity":1,"message":"266","line":7,"column":5,"nodeType":"260","messageId":"261","endLine":7,"endColumn":16},{"ruleId":"258","severity":1,"message":"267","line":7,"column":25,"nodeType":"260","messageId":"261","endLine":7,"endColumn":35},{"ruleId":"258","severity":1,"message":"268","line":7,"column":42,"nodeType":"260","messageId":"261","endLine":7,"endColumn":46},{"ruleId":"258","severity":1,"message":"269","line":7,"column":48,"nodeType":"260","messageId":"261","endLine":7,"endColumn":56},{"ruleId":"258","severity":1,"message":"270","line":10,"column":5,"nodeType":"260","messageId":"261","endLine":10,"endColumn":13},{"ruleId":"258","severity":1,"message":"271","line":10,"column":15,"nodeType":"260","messageId":"261","endLine":10,"endColumn":29},{"ruleId":"258","severity":1,"message":"272","line":10,"column":31,"nodeType":"260","messageId":"261","endLine":10,"endColumn":43},{"ruleId":"258","severity":1,"message":"273","line":18,"column":15,"nodeType":"260","messageId":"261","endLine":18,"endColumn":24},{"ruleId":"258","severity":1,"message":"274","line":19,"column":5,"nodeType":"260","messageId":"261","endLine":19,"endColumn":14},{"ruleId":"258","severity":1,"message":"275","line":19,"column":16,"nodeType":"260","messageId":"261","endLine":19,"endColumn":24},{"ruleId":"258","severity":1,"message":"276","line":19,"column":26,"nodeType":"260","messageId":"261","endLine":19,"endColumn":42},{"ruleId":"258","severity":1,"message":"277","line":28,"column":15,"nodeType":"260","messageId":"261","endLine":28,"endColumn":23},{"ruleId":"258","severity":1,"message":"278","line":29,"column":11,"nodeType":"260","messageId":"261","endLine":29,"endColumn":16},{"ruleId":"258","severity":1,"message":"279","line":30,"column":5,"nodeType":"260","messageId":"261","endLine":30,"endColumn":13},{"ruleId":"258","severity":1,"message":"280","line":34,"column":10,"nodeType":"260","messageId":"261","endLine":34,"endColumn":14},{"ruleId":"281","severity":1,"message":"282","line":737,"column":1,"nodeType":"283","endLine":740,"endColumn":2},{"ruleId":"258","severity":1,"message":"284","line":7,"column":31,"nodeType":"260","messageId":"261","endLine":7,"endColumn":40},{"ruleId":"258","severity":1,"message":"266","line":8,"column":5,"nodeType":"260","messageId":"261","endLine":8,"endColumn":16},{"ruleId":"258","severity":1,"message":"267","line":8,"column":18,"nodeType":"260","messageId":"261","endLine":8,"endColumn":28},{"ruleId":"258","severity":1,"message":"285","line":8,"column":30,"nodeType":"260","messageId":"261","endLine":8,"endColumn":33},{"ruleId":"258","severity":1,"message":"268","line":8,"column":35,"nodeType":"260","messageId":"261","endLine":8,"endColumn":39},{"ruleId":"258","severity":1,"message":"269","line":8,"column":41,"nodeType":"260","messageId":"261","endLine":8,"endColumn":49},{"ruleId":"258","severity":1,"message":"286","line":9,"column":23,"nodeType":"260","messageId":"261","endLine":9,"endColumn":28},{"ruleId":"258","severity":1,"message":"259","line":9,"column":30,"nodeType":"260","messageId":"261","endLine":9,"endColumn":35},{"ruleId":"258","severity":1,"message":"287","line":9,"column":45,"nodeType":"260","messageId":"261","endLine":9,"endColumn":51},{"ruleId":"258","severity":1,"message":"288","line":9,"column":53,"nodeType":"260","messageId":"261","endLine":9,"endColumn":60},{"ruleId":"258","severity":1,"message":"289","line":11,"column":10,"nodeType":"260","messageId":"261","endLine":11,"endColumn":20},{"ruleId":"258","severity":1,"message":"290","line":11,"column":22,"nodeType":"260","messageId":"261","endLine":11,"endColumn":31},{"ruleId":"258","severity":1,"message":"291","line":15,"column":26,"nodeType":"260","messageId":"261","endLine":15,"endColumn":30},{"ruleId":"258","severity":1,"message":"292","line":16,"column":5,"nodeType":"260","messageId":"261","endLine":16,"endColumn":13},{"ruleId":"258","severity":1,"message":"293","line":16,"column":15,"nodeType":"260","messageId":"261","endLine":16,"endColumn":27},{"ruleId":"258","severity":1,"message":"294","line":16,"column":29,"nodeType":"260","messageId":"261","endLine":16,"endColumn":41},{"ruleId":"258","severity":1,"message":"295","line":18,"column":10,"nodeType":"260","messageId":"261","endLine":18,"endColumn":20},{"ruleId":"258","severity":1,"message":"296","line":19,"column":8,"nodeType":"260","messageId":"261","endLine":19,"endColumn":12},{"ruleId":"258","severity":1,"message":"277","line":23,"column":15,"nodeType":"260","messageId":"261","endLine":23,"endColumn":23},{"ruleId":"258","severity":1,"message":"297","line":23,"column":25,"nodeType":"260","messageId":"261","endLine":23,"endColumn":34},{"ruleId":"258","severity":1,"message":"298","line":23,"column":36,"nodeType":"260","messageId":"261","endLine":23,"endColumn":39},{"ruleId":"258","severity":1,"message":"299","line":23,"column":41,"nodeType":"260","messageId":"261","endLine":23,"endColumn":44},{"ruleId":"258","severity":1,"message":"300","line":24,"column":5,"nodeType":"260","messageId":"261","endLine":24,"endColumn":9},{"ruleId":"258","severity":1,"message":"279","line":25,"column":5,"nodeType":"260","messageId":"261","endLine":25,"endColumn":13},{"ruleId":"258","severity":1,"message":"284","line":7,"column":31,"nodeType":"260","messageId":"261","endLine":7,"endColumn":40},{"ruleId":"258","severity":1,"message":"266","line":8,"column":5,"nodeType":"260","messageId":"261","endLine":8,"endColumn":16},{"ruleId":"258","severity":1,"message":"267","line":8,"column":18,"nodeType":"260","messageId":"261","endLine":8,"endColumn":28},{"ruleId":"258","severity":1,"message":"285","line":8,"column":30,"nodeType":"260","messageId":"261","endLine":8,"endColumn":33},{"ruleId":"258","severity":1,"message":"268","line":8,"column":35,"nodeType":"260","messageId":"261","endLine":8,"endColumn":39},{"ruleId":"258","severity":1,"message":"269","line":8,"column":41,"nodeType":"260","messageId":"261","endLine":8,"endColumn":49},{"ruleId":"258","severity":1,"message":"286","line":9,"column":23,"nodeType":"260","messageId":"261","endLine":9,"endColumn":28},{"ruleId":"258","severity":1,"message":"259","line":9,"column":30,"nodeType":"260","messageId":"261","endLine":9,"endColumn":35},{"ruleId":"258","severity":1,"message":"287","line":9,"column":45,"nodeType":"260","messageId":"261","endLine":9,"endColumn":51},{"ruleId":"258","severity":1,"message":"288","line":9,"column":53,"nodeType":"260","messageId":"261","endLine":9,"endColumn":60},{"ruleId":"258","severity":1,"message":"289","line":11,"column":10,"nodeType":"260","messageId":"261","endLine":11,"endColumn":20},{"ruleId":"258","severity":1,"message":"290","line":11,"column":22,"nodeType":"260","messageId":"261","endLine":11,"endColumn":31},{"ruleId":"258","severity":1,"message":"291","line":15,"column":26,"nodeType":"260","messageId":"261","endLine":15,"endColumn":30},{"ruleId":"258","severity":1,"message":"292","line":16,"column":5,"nodeType":"260","messageId":"261","endLine":16,"endColumn":13},{"ruleId":"258","severity":1,"message":"293","line":16,"column":15,"nodeType":"260","messageId":"261","endLine":16,"endColumn":27},{"ruleId":"258","severity":1,"message":"294","line":16,"column":29,"nodeType":"260","messageId":"261","endLine":16,"endColumn":41},{"ruleId":"258","severity":1,"message":"295","line":18,"column":10,"nodeType":"260","messageId":"261","endLine":18,"endColumn":20},{"ruleId":"258","severity":1,"message":"296","line":19,"column":8,"nodeType":"260","messageId":"261","endLine":19,"endColumn":12},{"ruleId":"258","severity":1,"message":"277","line":23,"column":15,"nodeType":"260","messageId":"261","endLine":23,"endColumn":23},{"ruleId":"258","severity":1,"message":"297","line":23,"column":25,"nodeType":"260","messageId":"261","endLine":23,"endColumn":34},{"ruleId":"258","severity":1,"message":"298","line":23,"column":36,"nodeType":"260","messageId":"261","endLine":23,"endColumn":39},{"ruleId":"258","severity":1,"message":"299","line":23,"column":41,"nodeType":"260","messageId":"261","endLine":23,"endColumn":44},{"ruleId":"258","severity":1,"message":"300","line":24,"column":5,"nodeType":"260","messageId":"261","endLine":24,"endColumn":9},{"ruleId":"258","severity":1,"message":"279","line":25,"column":5,"nodeType":"260","messageId":"261","endLine":25,"endColumn":13},{"ruleId":"258","severity":1,"message":"301","line":40,"column":8,"nodeType":"260","messageId":"261","endLine":40,"endColumn":15},{"ruleId":"262","severity":1,"message":"263","line":5,"column":5,"nodeType":"264","messageId":"265","endLine":7,"endColumn":6},{"ruleId":"258","severity":1,"message":"302","line":6,"column":42,"nodeType":"260","messageId":"261","endLine":6,"endColumn":49},{"ruleId":"258","severity":1,"message":"259","line":7,"column":18,"nodeType":"260","messageId":"261","endLine":7,"endColumn":23},{"ruleId":"258","severity":1,"message":"267","line":7,"column":25,"nodeType":"260","messageId":"261","endLine":7,"endColumn":35},{"ruleId":"258","severity":1,"message":"268","line":7,"column":42,"nodeType":"260","messageId":"261","endLine":7,"endColumn":46},{"ruleId":"258","severity":1,"message":"269","line":7,"column":48,"nodeType":"260","messageId":"261","endLine":7,"endColumn":56},{"ruleId":"258","severity":1,"message":"303","line":18,"column":10,"nodeType":"260","messageId":"261","endLine":18,"endColumn":17},{"ruleId":"258","severity":1,"message":"304","line":18,"column":19,"nodeType":"260","messageId":"261","endLine":18,"endColumn":25},{"ruleId":"258","severity":1,"message":"305","line":18,"column":27,"nodeType":"260","messageId":"261","endLine":18,"endColumn":40},{"ruleId":"258","severity":1,"message":"306","line":18,"column":42,"nodeType":"260","messageId":"261","endLine":18,"endColumn":52},{"ruleId":"258","severity":1,"message":"289","line":19,"column":10,"nodeType":"260","messageId":"261","endLine":19,"endColumn":20},{"ruleId":"258","severity":1,"message":"290","line":19,"column":22,"nodeType":"260","messageId":"261","endLine":19,"endColumn":31},{"ruleId":"258","severity":1,"message":"273","line":23,"column":15,"nodeType":"260","messageId":"261","endLine":23,"endColumn":24},{"ruleId":"258","severity":1,"message":"274","line":23,"column":26,"nodeType":"260","messageId":"261","endLine":23,"endColumn":35},{"ruleId":"258","severity":1,"message":"291","line":23,"column":37,"nodeType":"260","messageId":"261","endLine":23,"endColumn":41},{"ruleId":"258","severity":1,"message":"292","line":23,"column":43,"nodeType":"260","messageId":"261","endLine":23,"endColumn":51},{"ruleId":"258","severity":1,"message":"307","line":24,"column":18,"nodeType":"260","messageId":"261","endLine":24,"endColumn":28},{"ruleId":"258","severity":1,"message":"293","line":25,"column":33,"nodeType":"260","messageId":"261","endLine":25,"endColumn":45},{"ruleId":"258","severity":1,"message":"308","line":25,"column":47,"nodeType":"260","messageId":"261","endLine":25,"endColumn":55},{"ruleId":"258","severity":1,"message":"294","line":25,"column":57,"nodeType":"260","messageId":"261","endLine":25,"endColumn":69},{"ruleId":"258","severity":1,"message":"309","line":26,"column":5,"nodeType":"260","messageId":"261","endLine":26,"endColumn":28},{"ruleId":"258","severity":1,"message":"310","line":26,"column":30,"nodeType":"260","messageId":"261","endLine":26,"endColumn":37},{"ruleId":"258","severity":1,"message":"311","line":26,"column":39,"nodeType":"260","messageId":"261","endLine":26,"endColumn":49},{"ruleId":"258","severity":1,"message":"312","line":29,"column":5,"nodeType":"260","messageId":"261","endLine":29,"endColumn":15},{"ruleId":"258","severity":1,"message":"313","line":29,"column":17,"nodeType":"260","messageId":"261","endLine":29,"endColumn":30},{"ruleId":"258","severity":1,"message":"314","line":30,"column":12,"nodeType":"260","messageId":"261","endLine":30,"endColumn":34},{"ruleId":"258","severity":1,"message":"277","line":35,"column":15,"nodeType":"260","messageId":"261","endLine":35,"endColumn":23},{"ruleId":"258","severity":1,"message":"315","line":36,"column":31,"nodeType":"260","messageId":"261","endLine":36,"endColumn":36},{"ruleId":"258","severity":1,"message":"316","line":42,"column":8,"nodeType":"260","messageId":"261","endLine":42,"endColumn":22},{"ruleId":"258","severity":1,"message":"317","line":44,"column":25,"nodeType":"260","messageId":"261","endLine":44,"endColumn":35},{"ruleId":"258","severity":1,"message":"318","line":7,"column":35,"nodeType":"260","messageId":"261","endLine":7,"endColumn":53},{"ruleId":"258","severity":1,"message":"319","line":8,"column":36,"nodeType":"260","messageId":"261","endLine":8,"endColumn":53},{"ruleId":"258","severity":1,"message":"320","line":8,"column":55,"nodeType":"260","messageId":"261","endLine":8,"endColumn":70},{"ruleId":"258","severity":1,"message":"321","line":10,"column":10,"nodeType":"260","messageId":"261","endLine":10,"endColumn":21},{"ruleId":"258","severity":1,"message":"322","line":10,"column":23,"nodeType":"260","messageId":"261","endLine":10,"endColumn":36},{"ruleId":"258","severity":1,"message":"273","line":25,"column":15,"nodeType":"260","messageId":"261","endLine":25,"endColumn":24},{"ruleId":"258","severity":1,"message":"274","line":26,"column":5,"nodeType":"260","messageId":"261","endLine":26,"endColumn":14},{"ruleId":"258","severity":1,"message":"275","line":26,"column":16,"nodeType":"260","messageId":"261","endLine":26,"endColumn":24},{"ruleId":"258","severity":1,"message":"276","line":26,"column":26,"nodeType":"260","messageId":"261","endLine":26,"endColumn":42},{"ruleId":"258","severity":1,"message":"323","line":29,"column":5,"nodeType":"260","messageId":"261","endLine":29,"endColumn":23},{"ruleId":"258","severity":1,"message":"324","line":29,"column":25,"nodeType":"260","messageId":"261","endLine":29,"endColumn":46},{"ruleId":"258","severity":1,"message":"325","line":30,"column":5,"nodeType":"260","messageId":"261","endLine":30,"endColumn":26},{"ruleId":"258","severity":1,"message":"326","line":30,"column":28,"nodeType":"260","messageId":"261","endLine":30,"endColumn":33},{"ruleId":"258","severity":1,"message":"327","line":30,"column":35,"nodeType":"260","messageId":"261","endLine":30,"endColumn":40},{"ruleId":"258","severity":1,"message":"277","line":36,"column":15,"nodeType":"260","messageId":"261","endLine":36,"endColumn":23},{"ruleId":"258","severity":1,"message":"297","line":36,"column":25,"nodeType":"260","messageId":"261","endLine":36,"endColumn":34},{"ruleId":"258","severity":1,"message":"298","line":36,"column":36,"nodeType":"260","messageId":"261","endLine":36,"endColumn":39},{"ruleId":"258","severity":1,"message":"299","line":36,"column":41,"nodeType":"260","messageId":"261","endLine":36,"endColumn":44},{"ruleId":"258","severity":1,"message":"300","line":37,"column":5,"nodeType":"260","messageId":"261","endLine":37,"endColumn":9},{"ruleId":"258","severity":1,"message":"278","line":37,"column":11,"nodeType":"260","messageId":"261","endLine":37,"endColumn":16},{"ruleId":"258","severity":1,"message":"279","line":38,"column":5,"nodeType":"260","messageId":"261","endLine":38,"endColumn":13},{"ruleId":"258","severity":1,"message":"318","line":7,"column":35,"nodeType":"260","messageId":"261","endLine":7,"endColumn":53},{"ruleId":"258","severity":1,"message":"319","line":8,"column":36,"nodeType":"260","messageId":"261","endLine":8,"endColumn":53},{"ruleId":"258","severity":1,"message":"320","line":8,"column":55,"nodeType":"260","messageId":"261","endLine":8,"endColumn":70},{"ruleId":"258","severity":1,"message":"328","line":10,"column":10,"nodeType":"260","messageId":"261","endLine":10,"endColumn":31},{"ruleId":"258","severity":1,"message":"329","line":11,"column":10,"nodeType":"260","messageId":"261","endLine":11,"endColumn":33},{"ruleId":"258","severity":1,"message":"330","line":17,"column":21,"nodeType":"260","messageId":"261","endLine":17,"endColumn":35},{"ruleId":"258","severity":1,"message":"331","line":17,"column":37,"nodeType":"260","messageId":"261","endLine":17,"endColumn":43},{"ruleId":"258","severity":1,"message":"323","line":22,"column":5,"nodeType":"260","messageId":"261","endLine":22,"endColumn":23},{"ruleId":"258","severity":1,"message":"324","line":22,"column":25,"nodeType":"260","messageId":"261","endLine":22,"endColumn":46},{"ruleId":"258","severity":1,"message":"325","line":23,"column":5,"nodeType":"260","messageId":"261","endLine":23,"endColumn":26},{"ruleId":"258","severity":1,"message":"326","line":23,"column":28,"nodeType":"260","messageId":"261","endLine":23,"endColumn":33},{"ruleId":"258","severity":1,"message":"332","line":24,"column":39,"nodeType":"260","messageId":"261","endLine":24,"endColumn":43},{"ruleId":"258","severity":1,"message":"297","line":28,"column":30,"nodeType":"260","messageId":"261","endLine":28,"endColumn":39},{"ruleId":"258","severity":1,"message":"298","line":28,"column":41,"nodeType":"260","messageId":"261","endLine":28,"endColumn":44},{"ruleId":"258","severity":1,"message":"299","line":28,"column":46,"nodeType":"260","messageId":"261","endLine":28,"endColumn":49},{"ruleId":"258","severity":1,"message":"266","line":38,"column":5,"nodeType":"260","messageId":"261","endLine":38,"endColumn":16},{"ruleId":"258","severity":1,"message":"259","line":38,"column":18,"nodeType":"260","messageId":"261","endLine":38,"endColumn":23},{"ruleId":"258","severity":1,"message":"267","line":38,"column":25,"nodeType":"260","messageId":"261","endLine":38,"endColumn":35},{"ruleId":"258","severity":1,"message":"268","line":38,"column":42,"nodeType":"260","messageId":"261","endLine":38,"endColumn":46},{"ruleId":"258","severity":1,"message":"269","line":38,"column":48,"nodeType":"260","messageId":"261","endLine":38,"endColumn":56},{"ruleId":"258","severity":1,"message":"333","line":39,"column":47,"nodeType":"260","messageId":"261","endLine":39,"endColumn":55},{"ruleId":"258","severity":1,"message":"303","line":41,"column":10,"nodeType":"260","messageId":"261","endLine":41,"endColumn":17},{"ruleId":"258","severity":1,"message":"304","line":41,"column":19,"nodeType":"260","messageId":"261","endLine":41,"endColumn":25},{"ruleId":"258","severity":1,"message":"289","line":42,"column":10,"nodeType":"260","messageId":"261","endLine":42,"endColumn":20},{"ruleId":"258","severity":1,"message":"290","line":42,"column":22,"nodeType":"260","messageId":"261","endLine":42,"endColumn":31},{"ruleId":"334","severity":1,"message":"335","line":847,"column":49,"nodeType":"336","messageId":"337","endLine":847,"endColumn":51},{"ruleId":"334","severity":1,"message":"335","line":1123,"column":59,"nodeType":"336","messageId":"337","endLine":1123,"endColumn":61},{"ruleId":"334","severity":1,"message":"335","line":1139,"column":59,"nodeType":"336","messageId":"337","endLine":1139,"endColumn":61},{"ruleId":"338","severity":1,"message":"339","line":1146,"column":38,"nodeType":"260","messageId":"340","endLine":1146,"endColumn":43},{"ruleId":"341","severity":1,"message":"342","line":1157,"column":157,"nodeType":"343","messageId":"344","endLine":1157,"endColumn":158},{"ruleId":"281","severity":1,"message":"282","line":1203,"column":1,"nodeType":"283","endLine":1206,"endColumn":2},{"ruleId":"254","replacedBy":"345"},{"ruleId":"256","replacedBy":"346"},{"ruleId":"262","severity":1,"message":"263","line":5,"column":5,"nodeType":"264","messageId":"265","endLine":7,"endColumn":6},{"ruleId":"258","severity":1,"message":"302","line":6,"column":42,"nodeType":"260","messageId":"261","endLine":6,"endColumn":49},{"ruleId":"258","severity":1,"message":"259","line":7,"column":18,"nodeType":"260","messageId":"261","endLine":7,"endColumn":23},{"ruleId":"258","severity":1,"message":"267","line":7,"column":25,"nodeType":"260","messageId":"261","endLine":7,"endColumn":35},{"ruleId":"258","severity":1,"message":"285","line":7,"column":37,"nodeType":"260","messageId":"261","endLine":7,"endColumn":40},{"ruleId":"258","severity":1,"message":"268","line":7,"column":42,"nodeType":"260","messageId":"261","endLine":7,"endColumn":46},{"ruleId":"258","severity":1,"message":"269","line":7,"column":48,"nodeType":"260","messageId":"261","endLine":7,"endColumn":56},{"ruleId":"258","severity":1,"message":"303","line":18,"column":10,"nodeType":"260","messageId":"261","endLine":18,"endColumn":17},{"ruleId":"258","severity":1,"message":"304","line":18,"column":19,"nodeType":"260","messageId":"261","endLine":18,"endColumn":25},{"ruleId":"258","severity":1,"message":"305","line":18,"column":27,"nodeType":"260","messageId":"261","endLine":18,"endColumn":40},{"ruleId":"258","severity":1,"message":"306","line":18,"column":42,"nodeType":"260","messageId":"261","endLine":18,"endColumn":52},{"ruleId":"258","severity":1,"message":"289","line":19,"column":10,"nodeType":"260","messageId":"261","endLine":19,"endColumn":20},{"ruleId":"258","severity":1,"message":"290","line":19,"column":22,"nodeType":"260","messageId":"261","endLine":19,"endColumn":31},{"ruleId":"258","severity":1,"message":"273","line":23,"column":15,"nodeType":"260","messageId":"261","endLine":23,"endColumn":24},{"ruleId":"258","severity":1,"message":"274","line":23,"column":26,"nodeType":"260","messageId":"261","endLine":23,"endColumn":35},{"ruleId":"258","severity":1,"message":"291","line":23,"column":37,"nodeType":"260","messageId":"261","endLine":23,"endColumn":41},{"ruleId":"258","severity":1,"message":"292","line":23,"column":43,"nodeType":"260","messageId":"261","endLine":23,"endColumn":51},{"ruleId":"258","severity":1,"message":"307","line":24,"column":18,"nodeType":"260","messageId":"261","endLine":24,"endColumn":28},{"ruleId":"258","severity":1,"message":"293","line":25,"column":33,"nodeType":"260","messageId":"261","endLine":25,"endColumn":45},{"ruleId":"258","severity":1,"message":"308","line":25,"column":47,"nodeType":"260","messageId":"261","endLine":25,"endColumn":55},{"ruleId":"258","severity":1,"message":"294","line":25,"column":57,"nodeType":"260","messageId":"261","endLine":25,"endColumn":69},{"ruleId":"258","severity":1,"message":"309","line":26,"column":5,"nodeType":"260","messageId":"261","endLine":26,"endColumn":28},{"ruleId":"258","severity":1,"message":"310","line":26,"column":30,"nodeType":"260","messageId":"261","endLine":26,"endColumn":37},{"ruleId":"258","severity":1,"message":"311","line":26,"column":39,"nodeType":"260","messageId":"261","endLine":26,"endColumn":49},{"ruleId":"258","severity":1,"message":"312","line":29,"column":5,"nodeType":"260","messageId":"261","endLine":29,"endColumn":15},{"ruleId":"258","severity":1,"message":"313","line":29,"column":17,"nodeType":"260","messageId":"261","endLine":29,"endColumn":30},{"ruleId":"258","severity":1,"message":"314","line":30,"column":12,"nodeType":"260","messageId":"261","endLine":30,"endColumn":34},{"ruleId":"258","severity":1,"message":"277","line":35,"column":15,"nodeType":"260","messageId":"261","endLine":35,"endColumn":23},{"ruleId":"258","severity":1,"message":"315","line":36,"column":31,"nodeType":"260","messageId":"261","endLine":36,"endColumn":36},{"ruleId":"258","severity":1,"message":"316","line":42,"column":8,"nodeType":"260","messageId":"261","endLine":42,"endColumn":22},{"ruleId":"258","severity":1,"message":"317","line":44,"column":25,"nodeType":"260","messageId":"261","endLine":44,"endColumn":35},"no-native-reassign",["347"],"no-negated-in-lhs",["348"],"no-unused-vars","'Stack' is defined but never used.","Identifier","unusedVar","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'ButtonGroup' is defined but never used.","'SimpleGrid' is defined but never used.","'Grid' is defined but never used.","'GridItem' is defined but never used.","'Skeleton' is defined but never used.","'SkeletonCircle' is defined but never used.","'SkeletonText' is defined but never used.","'MUIButton' is defined but never used.","'TextField' is defined but never used.","'Backdrop' is defined but never used.","'CircularProgress' is defined but never used.","'RBButton' is defined but never used.","'Modal' is defined but never used.","'CardDeck' is defined but never used.","'Zoom' is defined but never used.","import/no-anonymous-default-export","Unexpected default export of anonymous function","ExportDefaultDeclaration","'CUIButton' is defined but never used.","'Box' is defined but never used.","'Input' is defined but never used.","'VStack' is defined but never used.","'flexbox' is defined but never used.","'FaFacebook' is defined but never used.","'FaTwitter' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'PeopleIcon' is defined but never used.","'Icon' is defined but never used.","'Container' is defined but never used.","'Row' is defined but never used.","'Col' is defined but never used.","'Card' is defined but never used.","'Booking' is defined but never used.","'Spinner' is defined but never used.","'MdBuild' is defined but never used.","'MdCall' is defined but never used.","'MdCheckCircle' is defined but never used.","'MdSettings' is defined but never used.","'InputLabel' is defined but never used.","'Checkbox' is defined but never used.","'ListItemSecondaryAction' is defined but never used.","'Divider' is defined but never used.","'Typography' is defined but never used.","'Visibility' is defined but never used.","'VisibilityOff' is defined but never used.","'ContactSupportOutlined' is defined but never used.","'Table' is defined but never used.","'overlayFactory' is defined but never used.","'textFilter' is defined but never used.","'EventSettingsModel' is defined but never used.","'EventRenderedArgs' is defined but never used.","'ActionEventArgs' is defined but never used.","'DataManager' is defined but never used.","'WebApiAdaptor' is defined but never used.","'VisibilityOutlined' is defined but never used.","'VisibilityOffOutlined' is defined but never used.","'PersonOutlineOutlined' is defined but never used.","'Error' is defined but never used.","'Close' is defined but never used.","'DropDownListComponent' is defined but never used.","'DateTimePickerComponent' is defined but never used.","'ListItemAvatar' is defined but never used.","'Avatar' is defined but never used.","'Info' is defined but never used.","'Collapse' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-redeclare","'count' is already defined.","redeclared","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat",["347"],["348"],"no-global-assign","no-unsafe-negation"]